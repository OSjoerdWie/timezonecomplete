/**
 * Copyright(c) 2014 Spirit IT BV
 *
 * Functionality to parse a DateTime object to a string
 */
/// <reference path="../typings/lib.d.ts"/>
var util = require("util");
var basics = require("./basics");
var TimeStruct = basics.TimeStruct;
var token = require("./token");
var Tokenizer = token.Tokenizer;
var TokenType = token.DateTimeTokenType;
var timeZone = require("./timezone");
/**
 * Checks if a given datetime string is according to the given format
 * @param dateTimeString The string to test
 * @param formatString LDML format string
 * @param allowTrailing Allow trailing string after the date+time
 * @returns true iff the string is valid
 */
function parseable(dateTimeString, formatString, allowTrailing) {
    if (allowTrailing === void 0) { allowTrailing = true; }
    try {
        parse(dateTimeString, formatString, null, allowTrailing);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.parseable = parseable;
/**
 * Parse the supplied dateTime assuming the given format.
 *
 * @param dateTimeString The string to parse
 * @param formatString The formatting string to be applied
 * @return string
 */
function parse(dateTimeString, formatString, zone, allowTrailing) {
    if (allowTrailing === void 0) { allowTrailing = true; }
    if (!dateTimeString) {
        throw new Error("no date given");
    }
    if (!formatString) {
        throw new Error("no format given");
    }
    try {
        var tokenizer = new Tokenizer(formatString);
        var tokens = tokenizer.parseTokens();
        var result = {
            time: new TimeStruct(0, 1, 1, 0, 0, 0, 0),
            zone: zone
        };
        var pnr;
        var pzr;
        var remaining = dateTimeString;
        tokens.forEach(function (token) {
            var tokenResult;
            switch (token.type) {
                case TokenType.ERA:
                    // nothing
                    break;
                case TokenType.YEAR:
                    pnr = stripNumber(remaining);
                    remaining = pnr.remaining;
                    result.time.year = pnr.n;
                    break;
                case TokenType.QUARTER:
                    // nothing
                    break;
                case TokenType.MONTH:
                    pnr = stripNumber(remaining);
                    remaining = pnr.remaining;
                    result.time.month = pnr.n;
                    break;
                case TokenType.DAY:
                    pnr = stripNumber(remaining);
                    remaining = pnr.remaining;
                    result.time.day = pnr.n;
                    break;
                case TokenType.WEEKDAY:
                    // nothing
                    break;
                case TokenType.DAYPERIOD:
                    // nothing
                    break;
                case TokenType.HOUR:
                    pnr = stripNumber(remaining);
                    remaining = pnr.remaining;
                    result.time.hour = pnr.n;
                    break;
                case TokenType.MINUTE:
                    pnr = stripNumber(remaining);
                    remaining = pnr.remaining;
                    result.time.minute = pnr.n;
                    break;
                case TokenType.SECOND:
                    pnr = stripNumber(remaining);
                    remaining = pnr.remaining;
                    if (token.raw.charAt(0) === "s") {
                        result.time.second = pnr.n;
                    }
                    else if (token.raw.charAt(0) === "S") {
                        result.time.milli = pnr.n;
                    }
                    else {
                        throw new Error(util.format("unsupported second format '%s'", token.raw));
                    }
                    break;
                case TokenType.ZONE:
                    pzr = stripZone(remaining);
                    remaining = pzr.remaining;
                    result.zone = pzr.zone;
                    break;
                case TokenType.WEEK:
                    // nothing
                    break;
                default:
                case TokenType.IDENTITY:
                    remaining = stripRaw(remaining, token.raw);
                    break;
            }
        });
        if (!result.time.validate()) {
            throw new Error("resulting date invalid");
        }
        // always overwrite zone with given zone
        if (zone) {
            result.zone = zone;
        }
        if (remaining && !allowTrailing) {
            throw new Error(util.format("Invalid date '%s' not according to format '%s': trailing characters: '%s'", dateTimeString, formatString, remaining));
        }
        return result;
    }
    catch (e) {
        throw new Error(util.format("Invalid date '%s' not according to format '%s': %s", dateTimeString, formatString, e.message));
    }
}
exports.parse = parse;
function stripNumber(s) {
    var result = {
        n: NaN,
        remaining: s
    };
    var numberString = "";
    while (result.remaining.length > 0 && result.remaining.charAt(0).match(/\d/)) {
        numberString += result.remaining.charAt(0);
        result.remaining = result.remaining.substr(1);
    }
    // remove leading zeroes
    while (numberString.charAt(0) === "0" && numberString.length > 1) {
        numberString = numberString.substr(1);
    }
    result.n = parseInt(numberString, 10);
    if (numberString === "" || !isFinite(result.n)) {
        throw new Error(util.format("expected a number but got '%s'", numberString));
    }
    return result;
}
var WHITESPACE = [" ", "\t", "\r", "\v", "\n"];
function stripZone(s) {
    if (s.length === 0) {
        throw new Error("no zone given");
    }
    var result = {
        zone: null,
        remaining: s
    };
    var zoneString = "";
    while (result.remaining.length > 0 && WHITESPACE.indexOf(result.remaining.charAt(0)) === -1) {
        zoneString += result.remaining.charAt(0);
        result.remaining = result.remaining.substr(1);
    }
    result.zone = timeZone.zone(zoneString);
    return result;
}
function stripRaw(s, expected) {
    var remaining = s;
    var eremaining = expected;
    while (remaining.length > 0 && eremaining.length > 0 && remaining.charAt(0) === eremaining.charAt(0)) {
        remaining = remaining.substr(1);
        eremaining = eremaining.substr(1);
    }
    if (eremaining.length > 0) {
        throw new Error(util.format("expected '%s'", expected));
    }
    return remaining;
}

//# sourceMappingURL=data:application/json;base64,
