/// <reference path="../typings/test.d.ts" />
var sourcemapsupport = require("source-map-support");
// Enable source-map support for backtraces. Causes TS files & linenumbers to show up in them.
sourcemapsupport.install({ handleUncaughtExceptions: false });
var assert = require("assert");
var chai = require("chai");
var expect = chai.expect;
var globals = require("../lib/globals");
var datetimeFuncs = require("../lib/index");
var DateTime = datetimeFuncs.DateTime;
var Duration = datetimeFuncs.Duration;
describe("globals", function () {
    describe("min()", function () {
        it("should return the minimum of two Durations", function () {
            expect(globals.min(Duration.seconds(3), Duration.seconds(4)).seconds()).to.equal(3);
        });
        it("should return the minimum of two DateTimes", function () {
            expect(globals.min(new DateTime(1), new DateTime(2)).unixUtcMillis()).to.equal(1);
        });
        it("should throw on null input", function () {
            assert.throws(function () {
                globals.min(null, Duration.seconds(2));
            });
            assert.throws(function () {
                globals.min(Duration.seconds(2), null);
            });
        });
    });
    describe("max()", function () {
        it("should return the maximum of two Durations", function () {
            expect(globals.max(Duration.seconds(3), Duration.seconds(4)).seconds()).to.equal(4);
        });
        it("should return the maximum of two DateTimes", function () {
            expect(globals.max(new DateTime(1), new DateTime(2)).unixUtcMillis()).to.equal(2);
        });
        it("should throw on null input", function () {
            assert.throws(function () {
                globals.max(null, Duration.seconds(2));
            });
            assert.throws(function () {
                globals.max(Duration.seconds(2), null);
            });
        });
    });
    describe("abs()", function () {
        it("should return the same value for a positive duration", function () {
            expect(globals.abs(Duration.milliseconds(2)).milliseconds()).to.equal(2);
        });
        it("should return the same value for a zero duration", function () {
            expect(globals.abs(Duration.milliseconds(0)).milliseconds()).to.equal(0);
        });
        it("should return the inverted value for a negative duration", function () {
            expect(globals.abs(Duration.milliseconds(-2)).milliseconds()).to.equal(2);
        });
        it("should return a clone", function () {
            var d = Duration.milliseconds(2);
            expect(globals.abs(d)).not.to.equal(d);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUVKLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdGVzdC1nbG9iYWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvdGVzdC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCBzb3VyY2VtYXBzdXBwb3J0ID0gcmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKTtcclxuLy8gRW5hYmxlIHNvdXJjZS1tYXAgc3VwcG9ydCBmb3IgYmFja3RyYWNlcy4gQ2F1c2VzIFRTIGZpbGVzICYgbGluZW51bWJlcnMgdG8gc2hvdyB1cCBpbiB0aGVtLlxyXG5zb3VyY2VtYXBzdXBwb3J0Lmluc3RhbGwoeyBoYW5kbGVVbmNhdWdodEV4Y2VwdGlvbnM6IGZhbHNlIH0pO1xyXG5cclxuaW1wb3J0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XHJcbmltcG9ydCBjaGFpID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmltcG9ydCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcclxuXHJcbmltcG9ydCBnbG9iYWxzID0gcmVxdWlyZShcIi4uL2xpYi9nbG9iYWxzXCIpO1xyXG5cclxuaW1wb3J0IGRhdGV0aW1lRnVuY3MgPSByZXF1aXJlKFwiLi4vbGliL2luZGV4XCIpO1xyXG5pbXBvcnQgRGF0ZVRpbWUgPSBkYXRldGltZUZ1bmNzLkRhdGVUaW1lO1xyXG5pbXBvcnQgRHVyYXRpb24gPSBkYXRldGltZUZ1bmNzLkR1cmF0aW9uO1xyXG5cclxuZGVzY3JpYmUoXCJnbG9iYWxzXCIsICgpOiB2b2lkID0+IHtcclxuXHJcblx0ZGVzY3JpYmUoXCJtaW4oKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdGhlIG1pbmltdW0gb2YgdHdvIER1cmF0aW9uc1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGV4cGVjdChnbG9iYWxzLm1pbihEdXJhdGlvbi5zZWNvbmRzKDMpLCBEdXJhdGlvbi5zZWNvbmRzKDQpKS5zZWNvbmRzKCkpLnRvLmVxdWFsKDMpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdGhlIG1pbmltdW0gb2YgdHdvIERhdGVUaW1lc1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGV4cGVjdChnbG9iYWxzLm1pbihuZXcgRGF0ZVRpbWUoMSksIG5ldyBEYXRlVGltZSgyKSkudW5peFV0Y01pbGxpcygpKS50by5lcXVhbCgxKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgdGhyb3cgb24gbnVsbCBpbnB1dFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGFzc2VydC50aHJvd3MoKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRcdGdsb2JhbHMubWluKG51bGwsIER1cmF0aW9uLnNlY29uZHMoMikpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0YXNzZXJ0LnRocm93cygoKTogdm9pZCA9PiB7XHJcblx0XHRcdFx0Z2xvYmFscy5taW4oRHVyYXRpb24uc2Vjb25kcygyKSwgbnVsbCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwibWF4KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRoZSBtYXhpbXVtIG9mIHR3byBEdXJhdGlvbnNcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5tYXgoRHVyYXRpb24uc2Vjb25kcygzKSwgRHVyYXRpb24uc2Vjb25kcyg0KSkuc2Vjb25kcygpKS50by5lcXVhbCg0KTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRoZSBtYXhpbXVtIG9mIHR3byBEYXRlVGltZXNcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5tYXgobmV3IERhdGVUaW1lKDEpLCBuZXcgRGF0ZVRpbWUoMikpLnVuaXhVdGNNaWxsaXMoKSkudG8uZXF1YWwoMik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHRocm93IG9uIG51bGwgaW5wdXRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRhc3NlcnQudGhyb3dzKCgpOiB2b2lkID0+IHtcclxuXHRcdFx0XHRnbG9iYWxzLm1heChudWxsLCBEdXJhdGlvbi5zZWNvbmRzKDIpKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGFzc2VydC50aHJvd3MoKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRcdGdsb2JhbHMubWF4KER1cmF0aW9uLnNlY29uZHMoMiksIG51bGwpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcImFicygpXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0aGUgc2FtZSB2YWx1ZSBmb3IgYSBwb3NpdGl2ZSBkdXJhdGlvblwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGV4cGVjdChnbG9iYWxzLmFicyhEdXJhdGlvbi5taWxsaXNlY29uZHMoMikpLm1pbGxpc2Vjb25kcygpKS50by5lcXVhbCgyKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRoZSBzYW1lIHZhbHVlIGZvciBhIHplcm8gZHVyYXRpb25cIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5hYnMoRHVyYXRpb24ubWlsbGlzZWNvbmRzKDApKS5taWxsaXNlY29uZHMoKSkudG8uZXF1YWwoMCk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0aGUgaW52ZXJ0ZWQgdmFsdWUgZm9yIGEgbmVnYXRpdmUgZHVyYXRpb25cIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5hYnMoRHVyYXRpb24ubWlsbGlzZWNvbmRzKC0yKSkubWlsbGlzZWNvbmRzKCkpLnRvLmVxdWFsKDIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gYSBjbG9uZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBkOiBEdXJhdGlvbiA9IER1cmF0aW9uLm1pbGxpc2Vjb25kcygyKTtcclxuXHRcdFx0ZXhwZWN0KGdsb2JhbHMuYWJzKGQpKS5ub3QudG8uZXF1YWwoZCk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=