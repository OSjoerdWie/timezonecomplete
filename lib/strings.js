/**
 * Copyright(c) 2014 Spirit IT BV
 *
 * String utility functions
 */
/// <reference path="../typings/lib.d.ts"/>
"use strict";
var assert = require("assert");
/**
 * Pad a string by adding characters to the beginning.
 * @param s	the string to pad
 * @param width	the desired minimum string width
 * @param char	the single character to pad with
 * @return	the padded string
 */
function padLeft(s, width, char) {
    assert(width > 0, "expect width > 0");
    assert(char.length === 1, "expect single character in char");
    var padding = "";
    for (var i = 0; i < (width - s.length); i++) {
        padding += char;
    }
    return padding + s;
}
exports.padLeft = padLeft;
/**
 * Pad a string by adding characters to the end.
 * @param s	the string to pad
 * @param width	the desired minimum string width
 * @param char	the single character to pad with
 * @return	the padded string
 */
function padRight(s, width, char) {
    assert(width > 0, "expect width > 0");
    assert(char.length === 1, "expect single character in char");
    var padding = "";
    for (var i = 0; i < (width - s.length); i++) {
        padding += char;
    }
    return s + padding;
}
exports.padRight = padRight;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zdHJpbmdzLnRzIl0sIm5hbWVzIjpbInBhZExlZnQiLCJwYWRSaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILEFBRUEsMkNBRjJDO0FBRTNDLFlBQVksQ0FBQztBQUViLElBQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBRWxDLEFBT0E7Ozs7OztHQURHO2lCQUNxQixDQUFTLEVBQUUsS0FBYSxFQUFFLElBQVk7SUFDN0RBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7SUFDdENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLEVBQUVBLGlDQUFpQ0EsQ0FBQ0EsQ0FBQ0E7SUFDN0RBLElBQUlBLE9BQU9BLEdBQVdBLEVBQUVBLENBQUNBO0lBQ3pCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUM3Q0EsT0FBT0EsSUFBSUEsSUFBSUEsQ0FBQ0E7SUFDakJBLENBQUNBO0lBQ0RBLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLENBQUNBLENBQUNBO0FBQ3BCQSxDQUFDQTtBQVJlLGVBQU8sVUFRdEIsQ0FBQTtBQUVELEFBT0E7Ozs7OztHQURHO2tCQUNzQixDQUFTLEVBQUUsS0FBYSxFQUFFLElBQVk7SUFDOURDLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7SUFDdENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLEVBQUVBLGlDQUFpQ0EsQ0FBQ0EsQ0FBQ0E7SUFDN0RBLElBQUlBLE9BQU9BLEdBQVdBLEVBQUVBLENBQUNBO0lBQ3pCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUM3Q0EsT0FBT0EsSUFBSUEsSUFBSUEsQ0FBQ0E7SUFDakJBLENBQUNBO0lBQ0RBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLE9BQU9BLENBQUNBO0FBQ3BCQSxDQUFDQTtBQVJlLGdCQUFRLFdBUXZCLENBQUEiLCJmaWxlIjoibGliL3N0cmluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIDIwMTQgU3Bpcml0IElUIEJWXHJcbiAqXHJcbiAqIFN0cmluZyB1dGlsaXR5IGZ1bmN0aW9uc1xyXG4gKi9cclxuXHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL2xpYi5kLnRzXCIvPlxyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcclxuXHJcbi8qKlxyXG4gKiBQYWQgYSBzdHJpbmcgYnkgYWRkaW5nIGNoYXJhY3RlcnMgdG8gdGhlIGJlZ2lubmluZy5cclxuICogQHBhcmFtIHNcdHRoZSBzdHJpbmcgdG8gcGFkXHJcbiAqIEBwYXJhbSB3aWR0aFx0dGhlIGRlc2lyZWQgbWluaW11bSBzdHJpbmcgd2lkdGhcclxuICogQHBhcmFtIGNoYXJcdHRoZSBzaW5nbGUgY2hhcmFjdGVyIHRvIHBhZCB3aXRoXHJcbiAqIEByZXR1cm5cdHRoZSBwYWRkZWQgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFkTGVmdChzOiBzdHJpbmcsIHdpZHRoOiBudW1iZXIsIGNoYXI6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0YXNzZXJ0KHdpZHRoID4gMCwgXCJleHBlY3Qgd2lkdGggPiAwXCIpO1xyXG5cdGFzc2VydChjaGFyLmxlbmd0aCA9PT0gMSwgXCJleHBlY3Qgc2luZ2xlIGNoYXJhY3RlciBpbiBjaGFyXCIpO1xyXG5cdHZhciBwYWRkaW5nOiBzdHJpbmcgPSBcIlwiO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgKHdpZHRoIC0gcy5sZW5ndGgpOyBpKyspIHtcclxuXHRcdHBhZGRpbmcgKz0gY2hhcjtcclxuXHR9XHJcblx0cmV0dXJuIHBhZGRpbmcgKyBzO1xyXG59XHJcblxyXG4vKipcclxuICogUGFkIGEgc3RyaW5nIGJ5IGFkZGluZyBjaGFyYWN0ZXJzIHRvIHRoZSBlbmQuXHJcbiAqIEBwYXJhbSBzXHR0aGUgc3RyaW5nIHRvIHBhZFxyXG4gKiBAcGFyYW0gd2lkdGhcdHRoZSBkZXNpcmVkIG1pbmltdW0gc3RyaW5nIHdpZHRoXHJcbiAqIEBwYXJhbSBjaGFyXHR0aGUgc2luZ2xlIGNoYXJhY3RlciB0byBwYWQgd2l0aFxyXG4gKiBAcmV0dXJuXHR0aGUgcGFkZGVkIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhZFJpZ2h0KHM6IHN0cmluZywgd2lkdGg6IG51bWJlciwgY2hhcjogc3RyaW5nKTogc3RyaW5nIHtcclxuXHRhc3NlcnQod2lkdGggPiAwLCBcImV4cGVjdCB3aWR0aCA+IDBcIik7XHJcblx0YXNzZXJ0KGNoYXIubGVuZ3RoID09PSAxLCBcImV4cGVjdCBzaW5nbGUgY2hhcmFjdGVyIGluIGNoYXJcIik7XHJcblx0dmFyIHBhZGRpbmc6IHN0cmluZyA9IFwiXCI7XHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCAod2lkdGggLSBzLmxlbmd0aCk7IGkrKykge1xyXG5cdFx0cGFkZGluZyArPSBjaGFyO1xyXG5cdH1cclxuXHRyZXR1cm4gcyArIHBhZGRpbmc7XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==