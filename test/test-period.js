/// <reference path="../typings/test.d.ts" />
var sourcemapsupport = require("source-map-support");
// Enable source-map support for backtraces. Causes TS files & linenumbers to show up in them.
sourcemapsupport.install({ handleUncaughtExceptions: false });
var assert = require("assert");
var chai = require("chai");
var expect = chai.expect;
var datetimeFuncs = require("../lib/index");
var DateTime = datetimeFuncs.DateTime;
var Duration = datetimeFuncs.Duration;
var Period = datetimeFuncs.Period;
var PeriodDst = datetimeFuncs.PeriodDst;
var TimeUnit = datetimeFuncs.TimeUnit;
var TimeZone = datetimeFuncs.TimeZone;
// Fake time source
var TestTimeSource = (function () {
    function TestTimeSource() {
        this.currentTime = new Date("2014-01-03T04:05:06.007Z");
    }
    TestTimeSource.prototype.now = function () {
        return this.currentTime;
    };
    return TestTimeSource;
})();
// Insert fake time source so that now() is stable
var testTimeSource = new TestTimeSource();
DateTime.timeSource = testTimeSource;
describe("Period", function () {
    describe("constructor()", function () {
        it("should work with a Duration", function () {
            var p = new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), new Duration(2, 6 /* Month */), 0 /* RegularIntervals */);
            expect(p.amount()).to.equal(2);
            expect(p.unit()).to.equal(6 /* Month */);
            expect(p.dst()).to.equal(0 /* RegularIntervals */);
        });
        it("should work with a Duration and provide default DST", function () {
            var p = new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), new Duration(2, 6 /* Month */));
            expect(p.dst()).to.equal(1 /* RegularLocalTime */);
        });
        it("should work with an amount and unit", function () {
            var p = new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */);
            expect(p.amount()).to.equal(2);
            expect(p.unit()).to.equal(6 /* Month */);
            expect(p.dst()).to.equal(0 /* RegularIntervals */);
        });
        it("should work with an amount and unit and provide default DST", function () {
            var p = new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), 2, 6 /* Month */);
            expect(p.dst()).to.equal(1 /* RegularLocalTime */);
        });
    });
    describe("start()", function () {
        expect((new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */)).start().toString()).to.equal("2014-01-31T12:00:00.000 UTC");
    });
    describe("amount()", function () {
        expect((new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */)).amount()).to.equal(2);
    });
    describe("unit()", function () {
        expect((new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */)).unit()).to.equal(6 /* Month */);
    });
    describe("dst()", function () {
        expect((new Period(new DateTime("2014-01-31T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */)).dst()).to.equal(0 /* RegularIntervals */);
    });
    describe("findFirst(<=start)", function () {
        it("should return start date in fromDate zone", function () {
            expect((new Period(new DateTime("2014-01-01T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2013-01-01T12:00:00.00+02")).toString()).to.equal("2014-01-01T14:00:00.000+02:00");
        });
        it("should work for 400-year leap year", function () {
            expect((new Period(new DateTime("2000-02-29T12:00:00.000 UTC"), 1, 7 /* Year */, 0 /* RegularIntervals */)).findFirst(new DateTime("1999-12-31T12:00:00 UTC")).toString()).to.equal("2000-02-29T12:00:00.000 UTC");
        });
        it("should NOT return start date for the start date itself", function () {
            expect((new Period(new DateTime("2014-01-01T12:00:00.000 UTC"), 2, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T14:00:00.00+02")).toString()).to.equal("2014-03-01T14:00:00.000+02:00");
        });
    });
    describe("Period(X, 1, X, RegularInterval).findFirst()", function () {
        it("should handle 1 millisecond", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 0 /* Millisecond */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T01:59:59.999 Europe/Amsterdam")).toString()).to.equal("2014-03-30T03:00:00.000 Europe/Amsterdam");
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase utc time, we expect to go from the FIRST 02:59:59 to 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 0 /* Millisecond */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:59:59.999 UTC")).toString()).to.equal("2014-10-26T01:00:00.000 UTC");
        });
        it("should handle 1 Second", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 1 /* Second */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T01:59:59.000 Europe/Amsterdam")).toString()).to.equal("2014-03-30T03:00:00.000 Europe/Amsterdam");
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase utc time, we expect to go from the FIRST 02:59:59 to 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 1 /* Second */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:59:59.000 UTC")).toString()).to.equal("2014-10-26T01:00:00.000 UTC");
        });
        it("should handle 1 Minute", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 2 /* Minute */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T01:59:59.000 UTC")).toString()).to.equal("2014-03-30T02:00:00.000 UTC");
        });
        it("should handle 1 Hour", function () {
            // check around dst
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:10:00.000 UTC")).toString()).to.equal("2014-10-26T01:05:06.007 UTC");
            // check it returns OK in local time (which stays from 2AM at 2AM)
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:10:00.000 UTC").toZone(TimeZone.zone("Europe/Amsterdam"))).toString()).to.equal("2014-10-26T02:05:06.007 Europe/Amsterdam");
        });
        it("should handle 1 Hour in zone with DST !== 1h", function () {
            // Ghana had DST of 20 minutes
            expect((new Period(new DateTime("1930-01-01T12:05:06.007 Africa/Accra"), 1, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("1937-10-26T00:10:00.000 Africa/Accra")).toString()).to.equal("1937-10-26T00:25:06.007 Africa/Accra");
        });
        it("should handle 1 Day", function () {
            // check it shifts local time from 12h to 13h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 4 /* Day */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-03-30T13:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 4 /* Day */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-01-02T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 1 Month", function () {
            // check it shifts local time from 12h to 13h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-28T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-04-01T13:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-02-01T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 1 Year", function () {
            // check it shifts local time (note in 2015 dst change is earlier)
            expect((new Period(new DateTime("2014-03-29T04:00:00.007 Europe/Amsterdam"), 1, 7 /* Year */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-04-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2015-03-29T05:00:00.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 7 /* Year */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2015-01-01T12:05:06.007 Europe/Amsterdam");
        });
    });
    describe("Period(X, 1, X, RegularLocalTime).findFirst()", function () {
        it("should handle 1 Millisecond", function () {
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase local time, we expect to go from the FIRST 02:59:59 to 03:00:00, skippint the second 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:59:59.999 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
        });
        it("should handle 1 Second", function () {
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase local time, we expect to go from the FIRST 02:59:59 to 03:00:00, skippint the second 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 1 /* Second */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:59:59.000 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
        });
        it("should handle 1 Minute", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 2 /* Minute */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:59:00.000 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
        });
        it("should handle 1 Hour", function () {
            // check around dst
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:00:00.000 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
            // check it returns OK in local time (which changes from 2AM to 3AM)
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:00:00.000 UTC").toZone(TimeZone.zone("Europe/Amsterdam"))).toString()).to.equal("2014-10-26T03:00:00.000 Europe/Amsterdam");
        });
        it("should handle 1 Hour in zone with DST !== 1h", function () {
            // Ghana had DST of 20 minutes
            expect((new Period(new DateTime("1930-01-01T12:05:06.007 Africa/Accra"), 1, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("1937-10-26T00:10:00.000 Africa/Accra")).toString()).to.equal("1937-10-26T01:05:06.007 Africa/Accra");
        });
        it("should handle 1 Day", function () {
            // check it keeps local time @ 12h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 4 /* Day */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-03-30T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-03-30T12:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 4 /* Day */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-01-02T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 1 Month", function () {
            // check it keeps local time @ 12h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-03-28T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-04-01T12:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-02-01T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 1 Year", function () {
            // check it keeps local time (note in 2015 dst change is earlier)
            expect((new Period(new DateTime("2014-03-29T04:00:00.007 Europe/Amsterdam"), 1, 7 /* Year */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-04-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2015-03-29T04:00:00.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 7 /* Year */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2015-01-01T12:05:06.007 Europe/Amsterdam");
        });
    });
    describe("Period(X, 2, X, RegularInterval).findFirst()", function () {
        it("should handle 2 Millisecond", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 0 /* Millisecond */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T01:59:59.998 Europe/Amsterdam")).toString()).to.equal("2014-03-30T03:00:00.000 Europe/Amsterdam");
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase utc time, we expect to go from the FIRST 02:59:59 to 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 0 /* Millisecond */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:59:59.998 UTC")).toString()).to.equal("2014-10-26T01:00:00.000 UTC");
        });
        it("should handle 2 Second", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 1 /* Second */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T01:59:58.000 Europe/Amsterdam")).toString()).to.equal("2014-03-30T03:00:00.000 Europe/Amsterdam");
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase utc time, we expect to go from the FIRST 02:59:59 to 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 1 /* Second */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:59:58.000 UTC")).toString()).to.equal("2014-10-26T01:00:00.000 UTC");
        });
        it("should handle 2 Minute", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 2 /* Minute */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T01:58:00.000 UTC")).toString()).to.equal("2014-03-30T02:00:00.000 UTC");
        });
        it("should handle 2 Hour", function () {
            // check around dst
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-26T00:10:00.000 UTC")).toString()).to.equal("2014-10-26T01:05:06.007 UTC"); // note 1AM because start time is 11AM UTC
            // check it returns OK in local time (which stays from 2AM at 2AM)
            expect((new Period(new DateTime("1970-01-01T01:00:00.000 Europe/Amsterdam"), 2, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-10-25T23:10:00.000 UTC").toZone(TimeZone.zone("Europe/Amsterdam"))).toString()).to.equal("2014-10-26T02:00:00.000 Europe/Amsterdam");
        });
        it("should handle 2 Hour in zone with DST !== 1h", function () {
            // Ghana had DST of 20 minutes
            expect((new Period(new DateTime("1930-01-01T12:05:06.007 Africa/Accra"), 2, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("1937-10-26T00:10:00.000 Africa/Accra")).toString()).to.equal("1937-10-26T00:25:06.007 Africa/Accra");
        });
        it("should handle 2 Day", function () {
            // check it shifts local time from 12h to 13h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 4 /* Day */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-03-31T13:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 4 /* Day */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-02T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-01-04T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 1 Week", function () {
            // check it shifts local time from 12h to 13h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 5 /* Week */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-30T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-04-03T13:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 1, 5 /* Week */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-02T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-01-09T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 2 Month", function () {
            // check it shifts local time from 12h to 13h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-03-28T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-05-01T13:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-03-01T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 2 Year", function () {
            // check it shifts local time (note in 2015 dst change is earlier)
            expect((new Period(new DateTime("2014-03-29T04:00:00.007 Europe/Amsterdam"), 2, 7 /* Year */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-04-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2016-03-29T05:00:00.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 7 /* Year */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2016-01-01T12:05:06.007 Europe/Amsterdam");
        });
    });
    describe("Period(X, 2, X, RegularLocalTime).findFirst()", function () {
        it("should handle 2 Millisecond", function () {
            this.timeout(30 * 1000);
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase local time, we expect to go from the FIRST 02:59:59 to 03:00:00, skippint the second 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:59:59.998 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
            // check reset on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 666, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:59:59.514 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:00:00.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 666, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:59:58.848 Europe/Amsterdam")).toString()).to.equal("2014-01-01T23:59:59.514 Europe/Amsterdam");
        });
        it("should handle 2 Second", function () {
            // note the target time is 2AM during DST backward, so 2AM exists twice.
            // Because we want to increase local time, we expect to go from the FIRST 02:59:59 to 03:00:00, skippint the second 02:00:00
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 1 /* Second */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:59:58.000 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
        });
        it("should handle 2 Minute", function () {
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 2 /* Minute */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:58:00.000 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
        });
        it("should handle 2 Hour", function () {
            // check around dst - because local time is kept in rythm, UTC time varies in hours
            expect((new Period(new DateTime("1970-01-01T11:00:00 Europe/Amsterdam"), 2, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-25T23:00:00.000 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:00:00.000 UTC")).toString()).to.equal("2014-10-26T03:00:00.000 UTC");
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T01:00:00.000 UTC")).toString()).to.equal("2014-10-26T03:00:00.000 UTC");
            // check it returns OK in local time (which changes from 2AM to 3AM)
            expect((new Period(new DateTime("1970-01-01T12:00:00 Europe/Amsterdam"), 2, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-10-26T00:00:00.000 UTC").toZone(TimeZone.zone("Europe/Amsterdam"))).toString()).to.equal("2014-10-26T04:00:00.000 Europe/Amsterdam");
        });
        it("should handle 2 Hour in zone with DST !== 1h", function () {
            // Ghana had DST of 20 minutes
            expect((new Period(new DateTime("1930-01-01T12:05:06.007 Africa/Accra"), 2, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("1937-10-26T00:10:00.000 Africa/Accra")).toString()).to.equal("1937-10-26T02:05:06.007 Africa/Accra");
        });
        it("should handle 2 Day", function () {
            // check it keeps local time @ 12h across DST
            expect((new Period(new DateTime("2014-03-26T12:00:00.000 Europe/Amsterdam"), 2, 4 /* Day */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-03-29T12:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-03-30T12:00:00.000 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("2014-03-26T12:05:06.007 Europe/Amsterdam"), 2, 4 /* Day */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-03-28T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-03-30T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 2 Month", function () {
            // check it keeps local time @ 12h
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-02-28T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-03-01T12:05:06.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2014-03-01T12:05:06.007 Europe/Amsterdam");
        });
        it("should handle 2 Year", function () {
            // check it keeps local time (note in 2015 dst change is earlier)
            expect((new Period(new DateTime("2014-03-29T04:00:00.007 Europe/Amsterdam"), 2, 7 /* Year */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2013-04-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-03-29T04:00:00.007 Europe/Amsterdam");
            // check it returns greater time for boundary fromdate
            expect((new Period(new DateTime("1970-01-01T12:05:06.007 Europe/Amsterdam"), 2, 7 /* Year */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T12:05:06.007 Europe/Amsterdam")).toString()).to.equal("2016-01-01T12:05:06.007 Europe/Amsterdam");
        });
    });
    describe("Period(X, >X, X, RegularInterval).findFirst()", function () {
        it("should handle >1000 Millisecond", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 2000, 0 /* Millisecond */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T00:00:02.000 Europe/Amsterdam");
            // check no effect on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 666, 0 /* Millisecond */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T23:59:59.514 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:00:00.180 Europe/Amsterdam");
        });
        it("should handle >60 Second", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 120, 1 /* Second */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T00:02:00.000 Europe/Amsterdam");
            // check no effect on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 66, 1 /* Second */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T23:59:54.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:01:00.000 Europe/Amsterdam");
        });
        it("should handle >60 Minute", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 120, 2 /* Minute */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T02:00:00.000 Europe/Amsterdam");
            // check no effect on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 66, 2 /* Minute */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T23:06:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:12:00.000 Europe/Amsterdam");
        });
        it("should handle >24 Hour", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 48, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-19T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-21T00:00:00.000 Europe/Amsterdam");
            // check that non-multiple of a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 25, 3 /* Hour */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T01:00:00.000 Europe/Amsterdam");
        });
        it("should handle >31 Day", function () {
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 40, 4 /* Day */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-20T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-02-10T00:00:00.000 Europe/Amsterdam");
        });
        it("should handle >53 Week", function () {
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 54, 5 /* Week */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2015-01-14T00:00:00.000 Europe/Amsterdam");
        });
        it("should handle >12 Month", function () {
            // non-leap year
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 13, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2014-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2015-02-01T00:00:00.000 Europe/Amsterdam");
            // leap year should not make a difference
            expect((new Period(new DateTime("2016-01-01T00:00:00.000 Europe/Amsterdam"), 13, 6 /* Month */, 0 /* RegularIntervals */)).findFirst(new DateTime("2016-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2017-02-01T00:00:00.000 Europe/Amsterdam");
        });
    });
    describe("Period(X, >X, X, RegularLocalTime).findFirst()", function () {
        it("should handle >1000 Millisecond", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 2000, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T00:00:02.000 Europe/Amsterdam");
            // check reset on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 2666, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:59:57.334 Europe/Amsterdam")).toString()).to.equal("2014-01-01T23:59:59.728 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 2666, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:59:59.728 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:00:00.000 Europe/Amsterdam");
            // half a day offset
            expect((new Period(new DateTime("2014-01-01T12:00:00.000 Europe/Amsterdam"), 2666, 0 /* Millisecond */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-02T11:59:59.728 Europe/Amsterdam")).toString()).to.equal("2014-01-02T12:00:00.000 Europe/Amsterdam");
        });
        it("should handle >60 Second", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 120, 1 /* Second */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T00:02:00.000 Europe/Amsterdam");
            // check reset on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 66, 1 /* Second */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:59:54.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:00:00.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 66, 1 /* Second */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:59:53.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T23:59:54.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T12:00:00.000 Europe/Amsterdam"), 66, 1 /* Second */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-02-02T11:59:53.000 Europe/Amsterdam")).toString()).to.equal("2014-02-02T11:59:54.000 Europe/Amsterdam");
        });
        it("should handle >60 Minute", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 120, 2 /* Minute */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T02:00:00.000 Europe/Amsterdam");
            // check reset on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 66, 2 /* Minute */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:06:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:00:00.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 66, 2 /* Minute */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T23:05:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T23:06:00.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T12:00:00.000 Europe/Amsterdam"), 66, 2 /* Minute */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-02T11:05:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T11:06:00.000 Europe/Amsterdam");
        });
        it("should handle >24 Hour", function () {
            // check that twice a unit works
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 48, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-19T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-21T00:00:00.000 Europe/Amsterdam");
            // check reset on day boundary for non-factor of 24h
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 5, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T20:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T00:00:00.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 5, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-01T19:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-01T20:00:00.000 Europe/Amsterdam");
            expect((new Period(new DateTime("2014-01-01T12:00:00.000 Europe/Amsterdam"), 5, 3 /* Hour */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-02T07:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-01-02T08:00:00.000 Europe/Amsterdam");
        });
        it("should handle >31 Day", function () {
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 40, 4 /* Day */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-20T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2014-02-10T00:00:00.000 Europe/Amsterdam");
        });
        it("should handle >53 Week", function () {
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 54, 5 /* Week */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2015-01-14T00:00:00.000 Europe/Amsterdam");
        });
        it("should handle >12 Month", function () {
            // non-leap year
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 13, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2015-02-01T00:00:00.000 Europe/Amsterdam");
            // multiple of 12 months
            expect((new Period(new DateTime("2014-01-01T00:00:00.000 Europe/Amsterdam"), 24, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2014-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2016-01-01T00:00:00.000 Europe/Amsterdam");
            // leap year should not make a difference
            expect((new Period(new DateTime("2016-01-01T00:00:00.000 Europe/Amsterdam"), 13, 6 /* Month */, 1 /* RegularLocalTime */)).findFirst(new DateTime("2016-01-10T00:00:00.000 Europe/Amsterdam")).toString()).to.equal("2017-02-01T00:00:00.000 Europe/Amsterdam");
        });
    });
    describe("Period(RegularInterval).findNext()", function () {
        it("Should handle no count", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-02-01T01:00:00 Europe/Amsterdam")).toString()).to.equal("2014-02-01T02:00:00.000 Europe/Amsterdam");
        });
        it("Should handle count 1", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-02-01T01:00:00 Europe/Amsterdam"), 1).toString()).to.equal("2014-02-01T02:00:00.000 Europe/Amsterdam");
        });
        it("Should handle count >1", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-02-01T01:00:00 Europe/Amsterdam"), 10).toString()).to.equal("2014-02-01T11:00:00.000 Europe/Amsterdam");
        });
        it("Should return same zone as parameter", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-02-01T01:00:00 UTC"), 10).toString()).to.equal("2014-02-01T11:00:00.000 UTC");
        });
        it("Should not handle DST", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-10-26T00:00:00 UTC")).toString()).to.equal("2014-10-26T01:00:00.000 UTC");
        });
        it("Should throw on null datetime", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            assert.throws(function () {
                p.findNext(null);
            });
        });
        it("Should throw on non-integer count", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            assert.throws(function () {
                p.findNext(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1.1);
            });
        });
        it("Should handle end-of-month for 28 < day < 31", function () {
            var p = new Period(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 1, 6 /* Month */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 1).toString()).to.equal("2014-02-28T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 2).toString()).to.equal("2014-03-29T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 25).toString()).to.equal("2016-02-29T00:00:00.000 Europe/Amsterdam");
        });
        it("Should handle end-of-month for day == 31", function () {
            var p = new Period(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 1, 6 /* Month */, 0 /* RegularIntervals */);
            expect(p.findNext(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 1).toString()).to.equal("2014-02-28T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 2).toString()).to.equal("2014-03-31T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 3).toString()).to.equal("2014-04-30T01:00:00.000 Europe/Amsterdam"); // note local time changes because RegularIntervals is set
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 25).toString()).to.equal("2016-02-29T00:00:00.000 Europe/Amsterdam");
        });
    });
    describe("Period(RegularLocalTime).findNext()", function () {
        it("Should handle DST", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.findNext(new DateTime("2014-10-26T00:00:00 UTC")).toString()).to.equal("2014-10-26T02:00:00.000 UTC");
        });
        it("Should handle count >1", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.findNext(new DateTime("2014-02-01T01:00:00 Europe/Amsterdam"), 10).toString()).to.equal("2014-02-01T11:00:00.000 Europe/Amsterdam");
        });
        it("Should handle end-of-month for 28 < day < 31", function () {
            var p = new Period(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 1, 6 /* Month */, 1 /* RegularLocalTime */);
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 1).toString()).to.equal("2014-02-28T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 2).toString()).to.equal("2014-03-29T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 25).toString()).to.equal("2016-02-29T00:00:00.000 Europe/Amsterdam");
        });
        it("Should handle end-of-month for day == 31", function () {
            var p = new Period(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 1, 6 /* Month */, 1 /* RegularLocalTime */);
            expect(p.findNext(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 1).toString()).to.equal("2014-02-28T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 2).toString()).to.equal("2014-03-31T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 3).toString()).to.equal("2014-04-30T00:00:00.000 Europe/Amsterdam");
            expect(p.findNext(new DateTime("2014-01-29T00:00:00 Europe/Amsterdam"), 25).toString()).to.equal("2016-02-29T00:00:00.000 Europe/Amsterdam");
        });
    });
    describe("findPrev()", function () {
        it("should return null for start date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.findPrev(new DateTime("2013-12-31T23:00:00 UTC"))).to.equal(null);
        });
        it("should return null for before start date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.findPrev(new DateTime("2013-12-31T23:00:00 UTC"))).to.equal(null);
        });
        it("should return the start date for first period", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.findPrev(new DateTime("2014-01-01T01:00:00 Europe/Amsterdam")).toString()).to.equal("2014-01-01T00:00:00.000 Europe/Amsterdam");
        });
        it("should return the date in the zone of the given time", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.findPrev(new DateTime("2014-01-01T01:00:00 UTC")).toString()).to.equal("2014-01-01T00:00:00.000 UTC");
        });
        it("Should handle end-of-month", function () {
            var p = new Period(new DateTime("2014-01-31T00:00:00 Europe/Amsterdam"), 1, 6 /* Month */, 1 /* RegularLocalTime */);
            expect(p.findPrev(new DateTime("2014-02-28T00:00:00 Europe/Amsterdam"), 1).toString()).to.equal("2014-01-31T00:00:00.000 Europe/Amsterdam");
            expect(p.findPrev(new DateTime("2014-03-31T00:00:00 Europe/Amsterdam"), 2).toString()).to.equal("2014-01-31T00:00:00.000 Europe/Amsterdam");
        });
        it("Should handle regular local time", function () {
            var p = new Period(new DateTime("2014-01-01T08:00:00 Europe/Amsterdam"), 1, 4 /* Day */, 1 /* RegularLocalTime */);
            expect(p.findPrev(new DateTime("2014-03-30T08:00:00 Europe/Amsterdam")).toString()).to.equal("2014-03-29T08:00:00.000 Europe/Amsterdam");
        });
        it("Should handle regular intervals", function () {
            var p = new Period(new DateTime("2014-01-01T08:00:00 Europe/Amsterdam"), 1, 4 /* Day */, 0 /* RegularIntervals */);
            expect(p.findPrev(new DateTime("2014-03-30T07:00:00 UTC")).toString()).to.equal("2014-03-29T07:00:00.000 UTC");
        });
        it("Should handle count > 1", function () {
            var p = new Period(new DateTime("2014-01-01T08:00:00 Europe/Amsterdam"), 1, 4 /* Day */, 0 /* RegularIntervals */);
            expect(p.findPrev(new DateTime("2014-03-30T07:00:00 UTC"), 2).toString()).to.equal("2014-03-28T07:00:00.000 UTC");
        });
    });
    describe("isBoundary()", function () {
        it("should return true for start date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.isBoundary(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"))).to.equal(true);
        });
        it("should return true for boundary date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.isBoundary(new DateTime("2014-01-02T02:00:00 Europe/Amsterdam"))).to.equal(true);
        });
        it("should return false for non-boundary date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.isBoundary(new DateTime("2014-01-02T02:00:01 Europe/Amsterdam"))).to.equal(false);
        });
        it("should return false for null date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.isBoundary(null)).to.equal(false);
        });
    });
    describe("equals()", function () {
        it("should return false for periods with different start", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:01 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(false);
        });
        it("should return false for periods with equal start but different time zone effect", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T01:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(false);
        });
        it("should return false for periods with different amount", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 2, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(false);
        });
        it("should return false for periods with different unit", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 2 /* Minute */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(false);
        });
        it("should return false for periods with different DST setting that matters", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.equals(q)).to.equal(false);
        });
        it("should return true for periods different DST setting that does not matter", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.equals(q)).to.equal(true);
        });
        it("should return true for identical periods", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(true);
        });
        it("should return true for periods with equal but not identical start", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 GMT"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(true);
        });
        it("should return true for periods with different unit and amount that adds up to same", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 60, 2 /* Minute */, 1 /* RegularLocalTime */);
            expect(p.equals(q)).to.equal(true);
        });
    });
    describe("identical()", function () {
        it("should return false for periods with different start", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:01 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods with equal start but different time zone effect", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T01:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods with different amount", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 2, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods with different unit", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 2 /* Minute */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods with different DST setting that matters", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods different DST setting that does not matter", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods with equal but not identical start", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 GMT"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return false for periods with different unit and amount that adds up to same", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 60, 2 /* Minute */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(false);
        });
        it("should return true for identical periods", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = new Period(new DateTime("2014-01-01T00:00:00 UTC"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.identical(q)).to.equal(true);
        });
    });
    describe("toString()", function () {
        it("should work with naive date", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.toString()).to.equal("1 hour, starting at 2014-01-01T00:00:00.000");
        });
        it("should work with PeriodDst.RegularLocalTime", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.toString()).to.equal("1 hour, starting at 2014-01-01T00:00:00.000 Europe/Amsterdam, keeping regular local time");
        });
        it("should work with PeriodDst.RegularIntervals", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 1, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.toString()).to.equal("1 hour, starting at 2014-01-01T00:00:00.000 Europe/Amsterdam, keeping regular intervals");
        });
        it("should work with multiple hours", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00 Europe/Amsterdam"), 2, 3 /* Hour */, 0 /* RegularIntervals */);
            expect(p.toString()).to.equal("2 hours, starting at 2014-01-01T00:00:00.000 Europe/Amsterdam, keeping regular intervals");
        });
    });
    describe("toIsoString()", function () {
        it("should work", function () {
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 60, 0 /* Millisecond */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P0.060S");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 1 /* Second */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P1S");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 2 /* Minute */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/PT1M");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 3 /* Hour */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P1H");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 4 /* Day */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P1D");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 5 /* Week */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P1W");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 6 /* Month */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P1M");
            expect((new Period(new DateTime("2014-01-01T00:00:00"), 1, 7 /* Year */, 1 /* RegularLocalTime */)).toIsoString()).to.equal("2014-01-01T00:00:00.000/P1Y");
        });
    });
    describe("inspect()", function () {
        it("should work", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            expect(p.inspect()).to.equal("[Period: " + p.toString() + "]");
        });
    });
    describe("clone()", function () {
        it("should work", function () {
            var p = new Period(new DateTime("2014-01-01T00:00:00"), 1, 3 /* Hour */, 1 /* RegularLocalTime */);
            var q = p.clone();
            expect(p).not.to.equal(q);
            expect(p.identical(q)).to.equal(true);
        });
    });
});
// todo test DST zone where DST save is not a whole hour (20 or 40 minutes)
// todo test zone with two DSTs

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdGVzdC1wZXJpb2QudHMiXSwibmFtZXMiOlsiVGVzdFRpbWVTb3VyY2UiLCJUZXN0VGltZVNvdXJjZS5jb25zdHJ1Y3RvciIsIlRlc3RUaW1lU291cmNlLm5vdyJdLCJtYXBwaW5ncyI6IkFBQUEsNkNBQTZDO0FBRTdDLElBQU8sZ0JBQWdCLFdBQVcsb0JBQW9CLENBQUMsQ0FBQztBQUN4RCxBQUNBLDhGQUQ4RjtBQUM5RixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRSx3QkFBd0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBRzlELElBQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLElBQU8sSUFBSSxXQUFXLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLElBQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFFNUIsSUFBTyxhQUFhLFdBQVcsY0FBYyxDQUFDLENBQUM7QUFFL0MsSUFBTyxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztBQUN6QyxJQUFPLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO0FBQ3pDLElBQU8sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7QUFDckMsSUFBTyxTQUFTLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztBQUUzQyxJQUFPLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO0FBQ3pDLElBQU8sUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7QUFFekMsQUFDQSxtQkFEbUI7SUFDYixjQUFjO0lBQXBCQSxTQUFNQSxjQUFjQTtRQUNaQyxnQkFBV0EsR0FBU0EsSUFBSUEsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxDQUFDQTtJQUtqRUEsQ0FBQ0E7SUFIQUQsNEJBQUdBLEdBQUhBO1FBQ0NFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUNGRixxQkFBQ0E7QUFBREEsQ0FOQSxBQU1DQSxJQUFBO0FBRUQsQUFDQSxrREFEa0Q7SUFDOUMsY0FBYyxHQUFtQixJQUFJLGNBQWMsRUFBRSxDQUFDO0FBQzFELFFBQVEsQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDO0FBR3JDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7SUFFbEIsUUFBUSxDQUFDLGVBQWUsRUFBRTtRQUN6QixFQUFFLENBQUMsNkJBQTZCLEVBQUU7WUFDakMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsYUFBYyxDQUFDLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUM3SCxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFjLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyx3QkFBMEIsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHFEQUFxRCxFQUFFO1lBQ3pELElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsSUFBSSxRQUFRLENBQUMsQ0FBQyxFQUFFLGFBQWMsQ0FBQyxDQUFDLENBQUM7WUFDakcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsd0JBQTBCLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMvRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFjLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyx3QkFBMEIsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDZEQUE2RCxFQUFFO1lBQ2pFLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsQ0FBQyxFQUFFLGFBQWMsQ0FBQyxDQUFDO1lBQ25GLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLHdCQUEwQixDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDbkIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDN0csS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDbkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUNwQixNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUM3RyxNQUFNLEVBQUUsQ0FBQyxDQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDbEIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDN0csSUFBSSxFQUFFLENBQUMsQ0FDUCxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWMsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNqQixNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUM3RyxHQUFHLEVBQUUsQ0FBQyxDQUNOLEVBQUUsQ0FBQyxLQUFLLENBQUMsd0JBQTBCLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtRQUM5QixFQUFFLENBQUMsMkNBQTJDLEVBQUU7WUFDL0MsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDN0csU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNoRSxFQUFFLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsb0NBQW9DLEVBQUU7WUFDeEMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDNUcsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUM5RCxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0RBQXdELEVBQUU7WUFDNUQsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDN0csU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNoRSxFQUFFLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyw4Q0FBOEMsRUFBRTtRQUN4RCxFQUFFLENBQUMsNkJBQTZCLEVBQUU7WUFDakMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsbUJBQW9CLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUM1SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUV2RCxBQUVBLHdFQUZ3RTtZQUN4RSw0RkFBNEY7WUFDNUYsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsbUJBQW9CLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUM1SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ2xFLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUM1QixNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFlLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN2SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUV2RCxBQUVBLHdFQUZ3RTtZQUN4RSw0RkFBNEY7WUFDNUYsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBZSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDdkgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNsRSxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDNUIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBZSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDdkgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNsRSxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsc0JBQXNCLEVBQUU7WUFDMUIsQUFDQSxtQkFEbUI7WUFDbkIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDekgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNsRSxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7WUFDMUMsQUFDQSxrRUFEa0U7WUFDbEUsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDekgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDNUcsRUFBRSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDhDQUE4QyxFQUFFO1lBQ2xELEFBQ0EsOEJBRDhCO1lBQzlCLE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDLENBQ3JILFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDM0UsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHFCQUFxQixFQUFFO1lBQ3pCLEFBQ0EsNkNBRDZDO1lBQzdDLE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVksRUFBRSx3QkFBMEIsQ0FBQyxDQUFDLENBQ3hILFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDL0UsRUFBRSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1lBQ3ZELEFBQ0Esc0RBRHNEO1lBQ3RELE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVksRUFBRSx3QkFBMEIsQ0FBQyxDQUFDLENBQ3hILFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDL0UsRUFBRSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHVCQUF1QixFQUFFO1lBQzNCLEFBQ0EsNkNBRDZDO1lBQzdDLE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGFBQWMsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDLENBQzFILFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDL0UsRUFBRSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1lBQ3ZELEFBQ0Esc0RBRHNEO1lBQ3RELE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGFBQWMsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDLENBQzFILFNBQVMsQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDL0UsRUFBRSxDQUFDLEtB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Q0FDeEgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsdUJBQXVCLEVBQUU7WUFDM0IsQUFDQSxrQ0FEa0M7WUFDbEMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDMUgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7WUFDdkQsQUFDQSxzREFEc0Q7WUFDdEQsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDMUgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsc0JBQXNCLEVBQUU7WUFDMUIsQUFDQSxpRUFEaUU7WUFDakUsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDekgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxD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QUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxBQUNBLHNEQURzRDtZQUN0RCxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFZLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN4SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtZQUMxQixBQUNBLDZDQUQ2QztZQUM3QyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxBQUNBLHNEQURzRDtZQUN0RCxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRTtZQUMzQixBQUNBLDZDQUQ2QztZQUM3QyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUMxSCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxBQUNBLHNEQURzRDtZQUN0RCxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUMxSCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtZQUMxQixBQUNBLGtFQURrRTtZQUNsRSxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxBQUNBLHNEQURzRDtZQUN0RCxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FB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TSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxHQUFHLEVBQUUsY0FBZSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDN0gsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7WUFDdkQsQUFDQSx3REFEd0Q7WUFDeEQsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxFQUFFLEVBQUUsY0FBZSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDNUgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDNUIsQUFDQSxnQ0FEZ0M7WUFDaEMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxFQUFFLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDMUgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7WUFDdkQsQUFDQSwwQ0FEMEM7WUFDMUMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxFQUFFLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDMUgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsdUJBQXVCLEVBQUU7WUFDM0IsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxFQUFFLEVBQUUsV0FBWSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDekgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDNUIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxFQUFFLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDMUgsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMseUJBQXlCLEVBQUU7WUFDN0IsQUFDQSxnQkFEZ0I7WUFDaEIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsRUFBRSxFQUFFLEVBQUUsYUFBYyxFQUFFLHdCQUEwQixDQUFDLENBQUMsQ0FDM0gsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUMvRSxFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7WUFDdkQsQUFDQSx5Q0FEeUM7WUFDekMsTUFBTSxDQUFD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QUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRTtZQUMzQixNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxXQUFZLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN6SCxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQy9FLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUM1QixNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUMxSCxTQUFTLENBQUMs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Q0FBQztRQUNILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUM1QixJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3JGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRTtZQUNsRCxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN4SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3JGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywwQ0FBMEMsRUFBRTtZQUM5QyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN4SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3JGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFlBQVksRUFBRTtRQUN0QixFQUFFLENBQUMsbUNBQW1DLEVBQUU7WUFDdkMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDdkgsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywwQ0FBMEMsRUFBRTtZQUM5QyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLCtDQUErQyxFQUFFO1lBQ25ELElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNqRixFQUFFLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsc0RBQXNELEVBQUU7WUFDMUQsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDdkgsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BFLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw0QkFBNEIsRUFBRTtZQUNoQyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN4SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3BGLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtZQUN0QyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFZLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN0SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDakYsRUFBRSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLGlDQUFpQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVksRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3RILE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMseUJBQXlCLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBWSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDdEgsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUN2RSxFQUFFLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxjQUFjLEVBQUU7UUFDeEIsRUFBRSxDQUFDLG1DQUFtQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7WUFDMUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDdkgsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRixDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtZQUMvQyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLG1DQUFtQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUNwQixFQUFFLENBQUMsc0RBQXNELEVBQUU7WUFDMUQsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLGlGQUFpRixFQUFFO1lBQ3JGLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx1REFBdUQsRUFBRTtZQUMzRCxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMscURBQXFELEVBQUU7WUFDekQsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBZSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDNUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHlFQUF5RSxFQUFFO1lBQzdFLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywyRUFBMkUsRUFBRTtZQUMvRSxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsMENBQTBDLEVBQUU7WUFDOUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLG1FQUFtRSxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxvRkFBb0YsRUFBRTtZQUN4RixJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxjQUFlLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUM3RyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDdkIsRUFBRSxDQUFDLHNEQUFzRCxFQUFFO1lBQzFELElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxpRkFBaUYsRUFBRTtZQUNyRixJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsdURBQXVELEVBQUU7WUFDM0QsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHFEQUFxRCxFQUFFO1lBQ3pELElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQWUsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzVHLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx5RUFBeUUsRUFBRTtZQUM3RSxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsNEVBQTRFLEVBQUU7WUFDaEYsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLG9FQUFvRSxFQUFFO1lBQ3hFLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQzFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxxRkFBcUYsRUFBRTtZQUN6RixJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUMxRyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxjQUFlLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUM3RyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsMENBQTBDLEVBQUU7WUFDOUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDMUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRTtZQUNqQyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN0RyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBQzlFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDZDQUE2QyxFQUFFO1lBQ2pELElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLDBGQUEwRixDQUFDLENBQUM7UUFDM0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsNkNBQTZDLEVBQUU7WUFDakQsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBYSxFQUFFLHdCQUEwQixDQUFDLENBQUM7WUFDdkgsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMseUZBQXlGLENBQUMsQ0FBQztRQUMxSCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN2SCxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQywwRkFBMEYsQ0FBQyxDQUFDO1FBQzNILENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3pCLEVBQUUsQ0FBQyxhQUFhLEVBQUU7WUFDakIsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMscUJBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsbUJBQW9CLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUM1RyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFlLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN0RyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFlLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUN0RyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUNwRyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFZLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUNuRyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUNwRyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFjLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUNyRyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQyxDQUNwRyxXQUFXLEVBQUUsQ0FBQyxDQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRTtRQUNyQixFQUFFLENBQUMsYUFBYSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQWEsRUFBRSx3QkFBMEIsQ0FBQyxDQUFDO1lBQ3RHLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDbkIsRUFBRSxDQUFDLGFBQWEsRUFBRTtZQUNqQixJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUUsd0JBQTBCLENBQUMsQ0FBQztZQUN0RyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUosQ0FBQyxDQUFDLENBQUM7QUFDSCwyRUFBMkU7QUFDM0UsK0JBQStCIiwiZmlsZSI6InRlc3QvdGVzdC1wZXJpb2QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy90ZXN0LmQudHNcIiAvPlxyXG5cclxuaW1wb3J0IHNvdXJjZW1hcHN1cHBvcnQgPSByZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpO1xyXG4vLyBFbmFibGUgc291cmNlLW1hcCBzdXBwb3J0IGZvciBiYWNrdHJhY2VzLiBDYXVzZXMgVFMgZmlsZXMgJiBsaW5lbnVtYmVycyB0byBzaG93IHVwIGluIHRoZW0uXHJcbnNvdXJjZW1hcHN1cHBvcnQuaW5zdGFsbCh7IGhhbmRsZVVuY2F1Z2h0RXhjZXB0aW9uczogZmFsc2UgfSk7XHJcblxyXG5cclxuaW1wb3J0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XHJcbmltcG9ydCBjaGFpID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmltcG9ydCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcclxuXHJcbmltcG9ydCBkYXRldGltZUZ1bmNzID0gcmVxdWlyZShcIi4uL2xpYi9pbmRleFwiKTtcclxuXHJcbmltcG9ydCBEYXRlVGltZSA9IGRhdGV0aW1lRnVuY3MuRGF0ZVRpbWU7XHJcbmltcG9ydCBEdXJhdGlvbiA9IGRhdGV0aW1lRnVuY3MuRHVyYXRpb247XHJcbmltcG9ydCBQZXJpb2QgPSBkYXRldGltZUZ1bmNzLlBlcmlvZDtcclxuaW1wb3J0IFBlcmlvZERzdCA9IGRhdGV0aW1lRnVuY3MuUGVyaW9kRHN0O1xyXG5pbXBvcnQgVGltZVNvdXJjZSA9IGRhdGV0aW1lRnVuY3MuVGltZVNvdXJjZTtcclxuaW1wb3J0IFRpbWVVbml0ID0gZGF0ZXRpbWVGdW5jcy5UaW1lVW5pdDtcclxuaW1wb3J0IFRpbWVab25lID0gZGF0ZXRpbWVGdW5jcy5UaW1lWm9uZTtcclxuXHJcbi8vIEZha2UgdGltZSBzb3VyY2VcclxuY2xhc3MgVGVzdFRpbWVTb3VyY2UgaW1wbGVtZW50cyBUaW1lU291cmNlIHtcclxuXHRwdWJsaWMgY3VycmVudFRpbWU6IERhdGUgPSBuZXcgRGF0ZShcIjIwMTQtMDEtMDNUMDQ6MDU6MDYuMDA3WlwiKTtcclxuXHJcblx0bm93KCk6IERhdGUge1xyXG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XHJcblx0fVxyXG59XHJcblxyXG4vLyBJbnNlcnQgZmFrZSB0aW1lIHNvdXJjZSBzbyB0aGF0IG5vdygpIGlzIHN0YWJsZVxyXG52YXIgdGVzdFRpbWVTb3VyY2U6IFRlc3RUaW1lU291cmNlID0gbmV3IFRlc3RUaW1lU291cmNlKCk7XHJcbkRhdGVUaW1lLnRpbWVTb3VyY2UgPSB0ZXN0VGltZVNvdXJjZTtcclxuXHJcblxyXG5kZXNjcmliZShcIlBlcmlvZFwiLCAoKTogdm9pZCA9PiB7XHJcblxyXG5cdGRlc2NyaWJlKFwiY29uc3RydWN0b3IoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCB3b3JrIHdpdGggYSBEdXJhdGlvblwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDEyOjAwOjAwLjAwMCBVVENcIiksIG5ldyBEdXJhdGlvbigyLCBUaW1lVW5pdC5Nb250aCksIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuYW1vdW50KCkpLnRvLmVxdWFsKDIpO1xyXG5cdFx0XHRleHBlY3QocC51bml0KCkpLnRvLmVxdWFsKFRpbWVVbml0Lk1vbnRoKTtcclxuXHRcdFx0ZXhwZWN0KHAuZHN0KCkpLnRvLmVxdWFsKFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgd29yayB3aXRoIGEgRHVyYXRpb24gYW5kIHByb3ZpZGUgZGVmYXVsdCBEU1RcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0zMVQxMjowMDowMC4wMDAgVVRDXCIpLCBuZXcgRHVyYXRpb24oMiwgVGltZVVuaXQuTW9udGgpKTtcclxuXHRcdFx0ZXhwZWN0KHAuZHN0KCkpLnRvLmVxdWFsKFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgd29yayB3aXRoIGFuIGFtb3VudCBhbmQgdW5pdFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDEyOjAwOjAwLjAwMCBVVENcIiksIDIsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0XHRcdGV4cGVjdChwLmFtb3VudCgpKS50by5lcXVhbCgyKTtcclxuXHRcdFx0ZXhwZWN0KHAudW5pdCgpKS50by5lcXVhbChUaW1lVW5pdC5Nb250aCk7XHJcblx0XHRcdGV4cGVjdChwLmRzdCgpKS50by5lcXVhbChQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHdvcmsgd2l0aCBhbiBhbW91bnQgYW5kIHVuaXQgYW5kIHByb3ZpZGUgZGVmYXVsdCBEU1RcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0zMVQxMjowMDowMC4wMDAgVVRDXCIpLCAyLCBUaW1lVW5pdC5Nb250aCk7XHJcblx0XHRcdGV4cGVjdChwLmRzdCgpKS50by5lcXVhbChQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJzdGFydCgpXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDEyOjAwOjAwLjAwMCBVVENcIiksIDIsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdC5zdGFydCgpLnRvU3RyaW5nKCkpXHJcblx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMzFUMTI6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJhbW91bnQoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0zMVQxMjowMDowMC4wMDAgVVRDXCIpLCAyLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHQuYW1vdW50KCkpXHJcblx0XHRcdC50by5lcXVhbCgyKTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJ1bml0KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMzFUMTI6MDA6MDAuMDAwIFVUQ1wiKSwgMiwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0LnVuaXQoKSlcclxuXHRcdFx0LnRvLmVxdWFsKFRpbWVVbml0Lk1vbnRoKTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJkc3QoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0zMVQxMjowMDowMC4wMDAgVVRDXCIpLCAyLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHQuZHN0KCkpXHJcblx0XHRcdC50by5lcXVhbChQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwiZmluZEZpcnN0KDw9c3RhcnQpXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiBzdGFydCBkYXRlIGluIGZyb21EYXRlIHpvbmVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowMDowMC4wMDAgVVRDXCIpLCAyLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxMy0wMS0wMVQxMjowMDowMC4wMCswMlwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDE0OjAwOjAwLjAwMCswMjowMFwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgd29yayBmb3IgNDAwLXllYXIgbGVhcCB5ZWFyXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMDAtMDItMjlUMTI6MDA6MDAuMDAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuWWVhciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMTk5OS0xMi0zMVQxMjowMDowMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAwMC0wMi0yOVQxMjowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBOT1QgcmV0dXJuIHN0YXJ0IGRhdGUgZm9yIHRoZSBzdGFydCBkYXRlIGl0c2VsZlwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDEyOjAwOjAwLjAwMCBVVENcIiksIDIsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDE0OjAwOjAwLjAwKzAyXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMDFUMTQ6MDA6MDAuMDAwKzAyOjAwXCIpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwiUGVyaW9kKFgsIDEsIFgsIFJlZ3VsYXJJbnRlcnZhbCkuZmluZEZpcnN0KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDEgbWlsbGlzZWNvbmRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5NaWxsaXNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMTo1OTo1OS45OTkgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTMwVDAzOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cclxuXHRcdFx0Ly8gbm90ZSB0aGUgdGFyZ2V0IHRpbWUgaXMgMkFNIGR1cmluZyBEU1QgYmFja3dhcmQsIHNvIDJBTSBleGlzdHMgdHdpY2UuXHJcblx0XHRcdC8vIEJlY2F1c2Ugd2Ugd2FudCB0byBpbmNyZWFzZSB1dGMgdGltZSwgd2UgZXhwZWN0IHRvIGdvIGZyb20gdGhlIEZJUlNUIDAyOjU5OjU5IHRvIDAyOjAwOjAwXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0Lk1pbGxpc2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjU5OjU5Ljk5OSBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMTowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBTZWNvbmRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5TZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDMtMzBUMDE6NTk6NTkuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0zMFQwMzowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHJcblx0XHRcdC8vIG5vdGUgdGhlIHRhcmdldCB0aW1lIGlzIDJBTSBkdXJpbmcgRFNUIGJhY2t3YXJkLCBzbyAyQU0gZXhpc3RzIHR3aWNlLlxyXG5cdFx0XHQvLyBCZWNhdXNlIHdlIHdhbnQgdG8gaW5jcmVhc2UgdXRjIHRpbWUsIHdlIGV4cGVjdCB0byBnbyBmcm9tIHRoZSBGSVJTVCAwMjo1OTo1OSB0byAwMjowMDowMFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5TZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6NTk6NTkuMDAwIFVUQ1wiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAxOjAwOjAwLjAwMCBVVENcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAxIE1pbnV0ZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0Lk1pbnV0ZSwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMTo1OTo1OS4wMDAgVVRDXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMzBUMDI6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDEgSG91clwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGFyb3VuZCBkc3RcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6MTA6MDAuMDAwIFVUQ1wiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAxOjA1OjA2LjAwNyBVVENcIik7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHJldHVybnMgT0sgaW4gbG9jYWwgdGltZSAod2hpY2ggc3RheXMgZnJvbSAyQU0gYXQgMkFNKVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0xMC0yNlQwMDoxMDowMC4wMDAgVVRDXCIpLnRvWm9uZShUaW1lWm9uZS56b25lKFwiRXVyb3BlL0Ftc3RlcmRhbVwiKSkpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDEgSG91ciBpbiB6b25lIHdpdGggRFNUICE9PSAxaFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIEdoYW5hIGhhZCBEU1Qgb2YgMjAgbWludXRlc1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTkzMC0wMS0wMVQxMjowNTowNi4wMDcgQWZyaWNhL0FjY3JhXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIxOTM3LTEwLTI2VDAwOjEwOjAwLjAwMCBBZnJpY2EvQWNjcmFcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMTkzNy0xMC0yNlQwMDoyNTowNi4wMDcgQWZyaWNhL0FjY3JhXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBEYXlcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBjaGVjayBpdCBzaGlmdHMgbG9jYWwgdGltZSBmcm9tIDEyaCB0byAxM2hcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTMwVDEzOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIGdyZWF0ZXIgdGltZSBmb3IgYm91bmRhcnkgZnJvbWRhdGVcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAyVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBNb250aFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHNoaWZ0cyBsb2NhbCB0aW1lIGZyb20gMTJoIHRvIDEzaFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDMtMjhUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wNC0wMVQxMzowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gY2hlY2sgaXQgcmV0dXJucyBncmVhdGVyIHRpbWUgZm9yIGJvdW5kYXJ5IGZyb21kYXRlXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAyLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBZZWFyXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgaXQgc2hpZnRzIGxvY2FsIHRpbWUgKG5vdGUgaW4gMjAxNSBkc3QgY2hhbmdlIGlzIGVhcmxpZXIpXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTI5VDA0OjAwOjAwLjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5ZZWFyLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTA0LTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTUtMDMtMjlUMDU6MDA6MDAuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHJldHVybnMgZ3JlYXRlciB0aW1lIGZvciBib3VuZGFyeSBmcm9tZGF0ZVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuWWVhciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE1LTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwiUGVyaW9kKFgsIDEsIFgsIFJlZ3VsYXJMb2NhbFRpbWUpLmZpbmRGaXJzdCgpXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAxIE1pbGxpc2Vjb25kXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gbm90ZSB0aGUgdGFyZ2V0IHRpbWUgaXMgMkFNIGR1cmluZyBEU1QgYmFja3dhcmQsIHNvIDJBTSBleGlzdHMgdHdpY2UuXHJcblx0XHRcdC8vIEJlY2F1c2Ugd2Ugd2FudCB0byBpbmNyZWFzZSBsb2NhbCB0aW1lLCB3ZSBleHBlY3QgdG8gZ28gZnJvbSB0aGUgRklSU1QgMDI6NTk6NTkgdG8gMDM6MDA6MDAsIHNraXBwaW50IHRoZSBzZWNvbmQgMDI6MDA6MDBcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuTWlsbGlzZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6NTk6NTkuOTk5IFVUQ1wiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAyOjAwOjAwLjAwMCBVVENcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAxIFNlY29uZFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIG5vdGUgdGhlIHRhcmdldCB0aW1lIGlzIDJBTSBkdXJpbmcgRFNUIGJhY2t3YXJkLCBzbyAyQU0gZXhpc3RzIHR3aWNlLlxyXG5cdFx0XHQvLyBCZWNhdXNlIHdlIHdhbnQgdG8gaW5jcmVhc2UgbG9jYWwgdGltZSwgd2UgZXhwZWN0IHRvIGdvIGZyb20gdGhlIEZJUlNUIDAyOjU5OjU5IHRvIDAzOjAwOjAwLCBza2lwcGludCB0aGUgc2Vjb25kIDAyOjAwOjAwXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LlNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0xMC0yNlQwMDo1OTo1OS4wMDAgVVRDXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMTAtMjZUMDI6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDEgTWludXRlXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuTWludXRlLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjU5OjAwLjAwMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMjowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBIb3VyXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgYXJvdW5kIGRzdFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjAwOjAwLjAwMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMjowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIE9LIGluIGxvY2FsIHRpbWUgKHdoaWNoIGNoYW5nZXMgZnJvbSAyQU0gdG8gM0FNKVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjAwOjAwLjAwMCBVVENcIikudG9ab25lKFRpbWVab25lLnpvbmUoXCJFdXJvcGUvQW1zdGVyZGFtXCIpKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAzOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBIb3VyIGluIHpvbmUgd2l0aCBEU1QgIT09IDFoXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gR2hhbmEgaGFkIERTVCBvZiAyMCBtaW51dGVzXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTMwLTAxLTAxVDEyOjA1OjA2LjAwNyBBZnJpY2EvQWNjcmFcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjE5MzctMTAtMjZUMDA6MTA6MDAuMDAwIEFmcmljYS9BY2NyYVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIxOTM3LTEwLTI2VDAxOjA1OjA2LjAwNyBBZnJpY2EvQWNjcmFcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAxIERheVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IGtlZXBzIGxvY2FsIHRpbWUgQCAxMmhcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTMwVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIGdyZWF0ZXIgdGltZSBmb3IgYm91bmRhcnkgZnJvbWRhdGVcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAyVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMSBNb250aFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IGtlZXBzIGxvY2FsIHRpbWUgQCAxMmhcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTI4VDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDQtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHJldHVybnMgZ3JlYXRlciB0aW1lIGZvciBib3VuZGFyeSBmcm9tZGF0ZVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMi0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDEgWWVhclwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IGtlZXBzIGxvY2FsIHRpbWUgKG5vdGUgaW4gMjAxNSBkc3QgY2hhbmdlIGlzIGVhcmxpZXIpXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTI5VDA0OjAwOjAwLjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5ZZWFyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTA0LTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTUtMDMtMjlUMDQ6MDA6MDAuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHJldHVybnMgZ3JlYXRlciB0aW1lIGZvciBib3VuZGFyeSBmcm9tZGF0ZVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuWWVhciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE1LTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwiUGVyaW9kKFgsIDIsIFgsIFJlZ3VsYXJJbnRlcnZhbCkuZmluZEZpcnN0KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDIgTWlsbGlzZWNvbmRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5NaWxsaXNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMTo1OTo1OS45OTggRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTMwVDAzOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cclxuXHRcdFx0Ly8gbm90ZSB0aGUgdGFyZ2V0IHRpbWUgaXMgMkFNIGR1cmluZyBEU1QgYmFja3dhcmQsIHNvIDJBTSBleGlzdHMgdHdpY2UuXHJcblx0XHRcdC8vIEJlY2F1c2Ugd2Ugd2FudCB0byBpbmNyZWFzZSB1dGMgdGltZSwgd2UgZXhwZWN0IHRvIGdvIGZyb20gdGhlIEZJUlNUIDAyOjU5OjU5IHRvIDAyOjAwOjAwXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0Lk1pbGxpc2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjU5OjU5Ljk5OCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMTowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMiBTZWNvbmRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5TZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDMtMzBUMDE6NTk6NTguMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0zMFQwMzowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHJcblx0XHRcdC8vIG5vdGUgdGhlIHRhcmdldCB0aW1lIGlzIDJBTSBkdXJpbmcgRFNUIGJhY2t3YXJkLCBzbyAyQU0gZXhpc3RzIHR3aWNlLlxyXG5cdFx0XHQvLyBCZWNhdXNlIHdlIHdhbnQgdG8gaW5jcmVhc2UgdXRjIHRpbWUsIHdlIGV4cGVjdCB0byBnbyBmcm9tIHRoZSBGSVJTVCAwMjo1OTo1OSB0byAwMjowMDowMFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5TZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6NTk6NTguMDAwIFVUQ1wiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAxOjAwOjAwLjAwMCBVVENcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAyIE1pbnV0ZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0Lk1pbnV0ZSwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMTo1ODowMC4wMDAgVVRDXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMzBUMDI6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDIgSG91clwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGFyb3VuZCBkc3RcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6MTA6MDAuMDAwIFVUQ1wiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAxOjA1OjA2LjAwNyBVVENcIik7IC8vIG5vdGUgMUFNIGJlY2F1c2Ugc3RhcnQgdGltZSBpcyAxMUFNIFVUQ1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIE9LIGluIGxvY2FsIHRpbWUgKHdoaWNoIHN0YXlzIGZyb20gMkFNIGF0IDJBTSlcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMDE6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjVUMjM6MTA6MDAuMDAwIFVUQ1wiKS50b1pvbmUoVGltZVpvbmUuem9uZShcIkV1cm9wZS9BbXN0ZXJkYW1cIikpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMTAtMjZUMDI6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAyIEhvdXIgaW4gem9uZSB3aXRoIERTVCAhPT0gMWhcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBHaGFuYSBoYWQgRFNUIG9mIDIwIG1pbnV0ZXNcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5MzAtMDEtMDFUMTI6MDU6MDYuMDA3IEFmcmljYS9BY2NyYVwiKSwgMiwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMTkzNy0xMC0yNlQwMDoxMDowMC4wMDAgQWZyaWNhL0FjY3JhXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjE5MzctMTAtMjZUMDA6MjU6MDYuMDA3IEFmcmljYS9BY2NyYVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDIgRGF5XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgaXQgc2hpZnRzIGxvY2FsIHRpbWUgZnJvbSAxMmggdG8gMTNoXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5EYXksIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDMtMzBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0zMVQxMzowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gY2hlY2sgaXQgcmV0dXJucyBncmVhdGVyIHRpbWUgZm9yIGJvdW5kYXJ5IGZyb21kYXRlXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5EYXksIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDJUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wNFQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDEgV2Vla1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHNoaWZ0cyBsb2NhbCB0aW1lIGZyb20gMTJoIHRvIDEzaFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuV2VlaywgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0zMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTA0LTAzVDEzOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIGdyZWF0ZXIgdGltZSBmb3IgYm91bmRhcnkgZnJvbWRhdGVcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LldlZWssIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDJUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wOVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDIgTW9udGhcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBjaGVjayBpdCBzaGlmdHMgbG9jYWwgdGltZSBmcm9tIDEyaCB0byAxM2hcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTI4VDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDUtMDFUMTM6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHJldHVybnMgZ3JlYXRlciB0aW1lIGZvciBib3VuZGFyeSBmcm9tZGF0ZVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMiwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDIgWWVhclwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHNoaWZ0cyBsb2NhbCB0aW1lIChub3RlIGluIDIwMTUgZHN0IGNoYW5nZSBpcyBlYXJsaWVyKVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0yOVQwNDowMDowMC4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMiwgVGltZVVuaXQuWWVhciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wNC0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE2LTAzLTI5VDA1OjAwOjAwLjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIGdyZWF0ZXIgdGltZSBmb3IgYm91bmRhcnkgZnJvbWRhdGVcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0LlllYXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNi0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcIlBlcmlvZChYLCAyLCBYLCBSZWd1bGFyTG9jYWxUaW1lKS5maW5kRmlyc3QoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMiBNaWxsaXNlY29uZFwiLCBmdW5jdGlvbiAoKTogdm9pZCB7XHJcblx0XHRcdHRoaXMudGltZW91dCgzMCAqIDEwMDApO1xyXG5cdFx0XHQvLyBub3RlIHRoZSB0YXJnZXQgdGltZSBpcyAyQU0gZHVyaW5nIERTVCBiYWNrd2FyZCwgc28gMkFNIGV4aXN0cyB0d2ljZS5cclxuXHRcdFx0Ly8gQmVjYXVzZSB3ZSB3YW50IHRvIGluY3JlYXNlIGxvY2FsIHRpbWUsIHdlIGV4cGVjdCB0byBnbyBmcm9tIHRoZSBGSVJTVCAwMjo1OTo1OSB0byAwMzowMDowMCwgc2tpcHBpbnQgdGhlIHNlY29uZCAwMjowMDowMFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5NaWxsaXNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0xMC0yNlQwMDo1OTo1OS45OTggVVRDXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMTAtMjZUMDI6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHJcblx0XHRcdC8vIGNoZWNrIHJlc2V0IG9uIGRheSBib3VuZGFyeSBmb3Igbm9uLWZhY3RvciBvZiAyNGhcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDY2NiwgVGltZVVuaXQuTWlsbGlzZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMjM6NTk6NTkuNTE0IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMlQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDY2NiwgVGltZVVuaXQuTWlsbGlzZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMjM6NTk6NTguODQ4IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMVQyMzo1OTo1OS41MTQgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlIDIgU2Vjb25kXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gbm90ZSB0aGUgdGFyZ2V0IHRpbWUgaXMgMkFNIGR1cmluZyBEU1QgYmFja3dhcmQsIHNvIDJBTSBleGlzdHMgdHdpY2UuXHJcblx0XHRcdC8vIEJlY2F1c2Ugd2Ugd2FudCB0byBpbmNyZWFzZSBsb2NhbCB0aW1lLCB3ZSBleHBlY3QgdG8gZ28gZnJvbSB0aGUgRklSU1QgMDI6NTk6NTkgdG8gMDM6MDA6MDAsIHNraXBwaW50IHRoZSBzZWNvbmQgMDI6MDA6MDBcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjE5NzAtMDEtMDFUMTI6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMiwgVGltZVVuaXQuU2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjU5OjU4LjAwMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMjowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMiBNaW51dGVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5NaW51dGUsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6NTg6MDAuMDAwIFVUQ1wiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAyOjAwOjAwLjAwMCBVVENcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAyIEhvdXJcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBjaGVjayBhcm91bmQgZHN0IC0gYmVjYXVzZSBsb2NhbCB0aW1lIGlzIGtlcHQgaW4gcnl0aG0sIFVUQyB0aW1lIHZhcmllcyBpbiBob3Vyc1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMTowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI1VDIzOjAwOjAwLjAwMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMjowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjAwOjAwLjAwMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMzowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAxOjAwOjAwLjAwMCBVVENcIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0xMC0yNlQwMzowMDowMC4wMDAgVVRDXCIpO1xyXG5cdFx0XHQvLyBjaGVjayBpdCByZXR1cm5zIE9LIGluIGxvY2FsIHRpbWUgKHdoaWNoIGNoYW5nZXMgZnJvbSAyQU0gdG8gM0FNKVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjAwOjAwLjAwMCBVVENcIikudG9ab25lKFRpbWVab25lLnpvbmUoXCJFdXJvcGUvQW1zdGVyZGFtXCIpKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDA0OjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMiBIb3VyIGluIHpvbmUgd2l0aCBEU1QgIT09IDFoXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gR2hhbmEgaGFkIERTVCBvZiAyMCBtaW51dGVzXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTMwLTAxLTAxVDEyOjA1OjA2LjAwNyBBZnJpY2EvQWNjcmFcIiksIDIsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjE5MzctMTAtMjZUMDA6MTA6MDAuMDAwIEFmcmljYS9BY2NyYVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIxOTM3LTEwLTI2VDAyOjA1OjA2LjAwNyBBZnJpY2EvQWNjcmFcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAyIERheVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIGl0IGtlZXBzIGxvY2FsIHRpbWUgQCAxMmggYWNyb3NzIERTVFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0yNlQxMjowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMiwgVGltZVVuaXQuRGF5LCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTI5VDEyOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMzBUMTI6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIGl0IHJldHVybnMgZ3JlYXRlciB0aW1lIGZvciBib3VuZGFyeSBmcm9tZGF0ZVxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMy0yNlQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMiwgVGltZVVuaXQuRGF5LCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTI4VDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMzBUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSAyIE1vbnRoXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgaXQga2VlcHMgbG9jYWwgdGltZSBAIDEyaFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMTk3MC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMiwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDItMjhUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gY2hlY2sgaXQgcmV0dXJucyBncmVhdGVyIHRpbWUgZm9yIGJvdW5kYXJ5IGZyb21kYXRlXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQxMjowNTowNi4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgMiBZZWFyXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgaXQga2VlcHMgbG9jYWwgdGltZSAobm90ZSBpbiAyMDE1IGRzdCBjaGFuZ2UgaXMgZWFybGllcilcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDMtMjlUMDQ6MDA6MDAuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0LlllYXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTMtMDQtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0yOVQwNDowMDowMC4wMDcgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gY2hlY2sgaXQgcmV0dXJucyBncmVhdGVyIHRpbWUgZm9yIGJvdW5kYXJ5IGZyb21kYXRlXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIxOTcwLTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyLCBUaW1lVW5pdC5ZZWFyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDEyOjA1OjA2LjAwNyBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTYtMDEtMDFUMTI6MDU6MDYuMDA3IEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJQZXJpb2QoWCwgPlgsIFgsIFJlZ3VsYXJJbnRlcnZhbCkuZmluZEZpcnN0KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlID4xMDAwIE1pbGxpc2Vjb25kXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgdGhhdCB0d2ljZSBhIHVuaXQgd29ya3NcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIwMDAsIFRpbWVVbml0Lk1pbGxpc2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDA6MDIuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIG5vIGVmZmVjdCBvbiBkYXkgYm91bmRhcnkgZm9yIG5vbi1mYWN0b3Igb2YgMjRoXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA2NjYsIFRpbWVVbml0Lk1pbGxpc2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIzOjU5OjU5LjUxNCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDA6MDA6MDAuMTgwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+NjAgU2Vjb25kXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgdGhhdCB0d2ljZSBhIHVuaXQgd29ya3NcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEyMCwgVGltZVVuaXQuU2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDI6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIG5vIGVmZmVjdCBvbiBkYXkgYm91bmRhcnkgZm9yIG5vbi1mYWN0b3Igb2YgMjRoXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA2NiwgVGltZVVuaXQuU2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIzOjU5OjU0LjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDA6MDE6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+NjAgTWludXRlXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgdGhhdCB0d2ljZSBhIHVuaXQgd29ya3NcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEyMCwgVGltZVVuaXQuTWludXRlLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDI6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIG5vIGVmZmVjdCBvbiBkYXkgYm91bmRhcnkgZm9yIG5vbi1mYWN0b3Igb2YgMjRoXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA2NiwgVGltZVVuaXQuTWludXRlLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIzOjA2OjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDA6MTI6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+MjQgSG91clwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIHRoYXQgdHdpY2UgYSB1bml0IHdvcmtzXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA0OCwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0xOVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTIxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHQvLyBjaGVjayB0aGF0IG5vbi1tdWx0aXBsZSBvZiBhIHVuaXQgd29ya3NcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDI1LCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDE6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+MzEgRGF5XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDQwLCBUaW1lVW5pdC5EYXksIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMjBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMi0xMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlID41MyBXZWVrXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDU0LCBUaW1lVW5pdC5XZWVrLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscykpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTEwVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTUtMDEtMTRUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+MTIgTW9udGhcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBub24tbGVhcCB5ZWFyXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxMywgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMTBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNS0wMi0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gbGVhcCB5ZWFyIHNob3VsZCBub3QgbWFrZSBhIGRpZmZlcmVuY2VcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTYtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEzLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNi0wMS0xMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE3LTAyLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwiUGVyaW9kKFgsID5YLCBYLCBSZWd1bGFyTG9jYWxUaW1lKS5maW5kRmlyc3QoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgPjEwMDAgTWlsbGlzZWNvbmRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBjaGVjayB0aGF0IHR3aWNlIGEgdW5pdCB3b3Jrc1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMjAwMCwgVGltZVVuaXQuTWlsbGlzZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMVQwMDowMDowMi4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gY2hlY2sgcmVzZXQgb24gZGF5IGJvdW5kYXJ5IGZvciBub24tZmFjdG9yIG9mIDI0aFxyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMjY2NiwgVGltZVVuaXQuTWlsbGlzZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMjM6NTk6NTcuMzM0IEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMVQyMzo1OTo1OS43MjggRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDI2NjYsIFRpbWVVbml0Lk1pbGxpc2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIzOjU5OjU5LjcyOCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGhhbGYgYSBkYXkgb2Zmc2V0XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDEyOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyNjY2LCBUaW1lVW5pdC5NaWxsaXNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMlQxMTo1OTo1OS43MjggRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAyVDEyOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCBoYW5kbGUgPjYwIFNlY29uZFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdC8vIGNoZWNrIHRoYXQgdHdpY2UgYSB1bml0IHdvcmtzXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxMjAsIFRpbWVVbml0LlNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDAwOjAyOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHQvLyBjaGVjayByZXNldCBvbiBkYXkgYm91bmRhcnkgZm9yIG5vbi1mYWN0b3Igb2YgMjRoXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA2NiwgVGltZVVuaXQuU2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIzOjU5OjU0LjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA2NiwgVGltZVVuaXQuU2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIzOjU5OjUzLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMjM6NTk6NTQuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDEyOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA2NiwgVGltZVVuaXQuU2Vjb25kLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAyLTAyVDExOjU5OjUzLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDItMDJUMTE6NTk6NTQuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+NjAgTWludXRlXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgdGhhdCB0d2ljZSBhIHVuaXQgd29ya3NcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEyMCwgVGltZVVuaXQuTWludXRlLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDI6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdC8vIGNoZWNrIHJlc2V0IG9uIGRheSBib3VuZGFyeSBmb3Igbm9uLWZhY3RvciBvZiAyNGhcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDY2LCBUaW1lVW5pdC5NaW51dGUsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMjM6MDY6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMlQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDY2LCBUaW1lVW5pdC5NaW51dGUsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMjM6MDU6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMVQyMzowNjowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMTI6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDY2LCBUaW1lVW5pdC5NaW51dGUsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDJUMTE6MDU6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0wMlQxMTowNjowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlID4yNCBIb3VyXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0Ly8gY2hlY2sgdGhhdCB0d2ljZSBhIHVuaXQgd29ya3NcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDQ4LCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTE5VDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMjFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblxyXG5cdFx0XHQvLyBjaGVjayByZXNldCBvbiBkYXkgYm91bmRhcnkgZm9yIG5vbi1mYWN0b3Igb2YgMjRoXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA1LCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDIwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA1LCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDE5OjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMjA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDEyOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCA1LCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAyVDA3OjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDJUMDg6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+MzEgRGF5XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDQwLCBUaW1lVW5pdC5EYXksIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMjBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMi0xMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgaGFuZGxlID41MyBXZWVrXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDU0LCBUaW1lVW5pdC5XZWVrLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSkpXHJcblx0XHRcdFx0LmZpbmRGaXJzdChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTEwVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTUtMDEtMTRUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIGhhbmRsZSA+MTIgTW9udGhcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHQvLyBub24tbGVhcCB5ZWFyXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxMywgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMTBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNS0wMi0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gbXVsdGlwbGUgb2YgMTIgbW9udGhzXHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyNCwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQuZmluZEZpcnN0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMTBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNi0wMS0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0Ly8gbGVhcCB5ZWFyIHNob3VsZCBub3QgbWFrZSBhIGRpZmZlcmVuY2VcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTYtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEzLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC5maW5kRmlyc3QobmV3IERhdGVUaW1lKFwiMjAxNi0wMS0xMFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE3LTAyLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwiUGVyaW9kKFJlZ3VsYXJJbnRlcnZhbCkuZmluZE5leHQoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcIlNob3VsZCBoYW5kbGUgbm8gY291bnRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDItMDFUMDE6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAyLTAxVDAyOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcIlNob3VsZCBoYW5kbGUgY291bnQgMVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMi0wMVQwMTowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDItMDFUMDI6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwiU2hvdWxkIGhhbmRsZSBjb3VudCA+MVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMi0wMVQwMTowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxMCkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAyLTAxVDExOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcIlNob3VsZCByZXR1cm4gc2FtZSB6b25lIGFzIHBhcmFtZXRlclwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMi0wMVQwMTowMDowMCBVVENcIiksIDEwKS50b1N0cmluZygpKS50by5lcXVhbChcIjIwMTQtMDItMDFUMTE6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgbm90IGhhbmRsZSBEU1RcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMTAtMjZUMDA6MDA6MDAgVVRDXCIpKS50b1N0cmluZygpKS50by5lcXVhbChcIjIwMTQtMTAtMjZUMDE6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgdGhyb3cgb24gbnVsbCBkYXRldGltZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0YXNzZXJ0LnRocm93cyhmdW5jdGlvbiAoKTogdm9pZCB7XHJcblx0XHRcdFx0cC5maW5kTmV4dChudWxsKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwiU2hvdWxkIHRocm93IG9uIG5vbi1pbnRlZ2VyIGNvdW50XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpO1xyXG5cdFx0XHRhc3NlcnQudGhyb3dzKGZ1bmN0aW9uICgpOiB2b2lkIHtcclxuXHRcdFx0XHRwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMS4xKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwiU2hvdWxkIGhhbmRsZSBlbmQtb2YtbW9udGggZm9yIDI4IDwgZGF5IDwgMzFcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0yOVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kTmV4dChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTI5VDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMi0yOFQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0yOVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAyKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMjlUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMjlUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMjUpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNi0wMi0yOVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgaGFuZGxlIGVuZC1vZi1tb250aCBmb3IgZGF5ID09IDMxXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMzFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0zMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDItMjhUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMzFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMikudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTMxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kTmV4dChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDMpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wNC0zMFQwMTowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTsgLy8gbm90ZSBsb2NhbCB0aW1lIGNoYW5nZXMgYmVjYXVzZSBSZWd1bGFySW50ZXJ2YWxzIGlzIHNldFxyXG5cdFx0XHRleHBlY3QocC5maW5kTmV4dChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTI5VDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDI1KS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTYtMDItMjlUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJQZXJpb2QoUmVndWxhckxvY2FsVGltZSkuZmluZE5leHQoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcIlNob3VsZCBoYW5kbGUgRFNUXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kTmV4dChuZXcgRGF0ZVRpbWUoXCIyMDE0LTEwLTI2VDAwOjAwOjAwIFVUQ1wiKSkudG9TdHJpbmcoKSkudG8uZXF1YWwoXCIyMDE0LTEwLTI2VDAyOjAwOjAwLjAwMCBVVENcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwiU2hvdWxkIGhhbmRsZSBjb3VudCA+MVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMi0wMVQwMTowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxMCkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAyLTAxVDExOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcIlNob3VsZCBoYW5kbGUgZW5kLW9mLW1vbnRoIGZvciAyOCA8IGRheSA8IDMxXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMjlUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuTW9udGgsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0yOVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDItMjhUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMjlUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMikudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTI5VDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kTmV4dChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTI5VDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDI1KS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTYtMDItMjlUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwiU2hvdWxkIGhhbmRsZSBlbmQtb2YtbW9udGggZm9yIGRheSA9PSAzMVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMzFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAyLTI4VDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kTmV4dChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0zMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZE5leHQobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0zMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAzKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDQtMzBUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW1cIik7XHJcblx0XHRcdGV4cGVjdChwLmZpbmROZXh0KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMjlUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMjUpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNi0wMi0yOVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcImZpbmRQcmV2KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIG51bGwgZm9yIHN0YXJ0IGRhdGVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmRQcmV2KG5ldyBEYXRlVGltZShcIjIwMTMtMTItMzFUMjM6MDA6MDAgVVRDXCIpKSkudG8uZXF1YWwobnVsbCk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiBudWxsIGZvciBiZWZvcmUgc3RhcnQgZGF0ZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0ZXhwZWN0KHAuZmluZFByZXYobmV3IERhdGVUaW1lKFwiMjAxMy0xMi0zMVQyMzowMDowMCBVVENcIikpKS50by5lcXVhbChudWxsKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRoZSBzdGFydCBkYXRlIGZvciBmaXJzdCBwZXJpb2RcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmRQcmV2KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDE6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdGhlIGRhdGUgaW4gdGhlIHpvbmUgb2YgdGhlIGdpdmVuIHRpbWVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmRQcmV2KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDE6MDA6MDAgVVRDXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgaGFuZGxlIGVuZC1vZi1tb250aFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTMxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0Lk1vbnRoLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmRQcmV2KG5ldyBEYXRlVGltZShcIjIwMTQtMDItMjhUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSkudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTMxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtXCIpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kUHJldihuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTMxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMS0zMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgaGFuZGxlIHJlZ3VsYXIgbG9jYWwgdGltZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDA4OjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kUHJldihuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTMwVDA4OjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIikpLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0LnRvLmVxdWFsKFwiMjAxNC0wMy0yOVQwODowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbVwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgaGFuZGxlIHJlZ3VsYXIgaW50ZXJ2YWxzXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDg6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuRGF5LCBQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0XHRcdGV4cGVjdChwLmZpbmRQcmV2KG5ldyBEYXRlVGltZShcIjIwMTQtMDMtMzBUMDc6MDA6MDAgVVRDXCIpKS50b1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDMtMjlUMDc6MDA6MDAuMDAwIFVUQ1wiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJTaG91bGQgaGFuZGxlIGNvdW50ID4gMVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDA4OjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpO1xyXG5cdFx0XHRleHBlY3QocC5maW5kUHJldihuZXcgRGF0ZVRpbWUoXCIyMDE0LTAzLTMwVDA3OjAwOjAwIFVUQ1wiKSwgMikudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAzLTI4VDA3OjAwOjAwLjAwMCBVVENcIik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJpc0JvdW5kYXJ5KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRydWUgZm9yIHN0YXJ0IGRhdGVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmlzQm91bmRhcnkobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpKSkudG8uZXF1YWwodHJ1ZSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0cnVlIGZvciBib3VuZGFyeSBkYXRlXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5pc0JvdW5kYXJ5KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDJUMDI6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSkpLnRvLmVxdWFsKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIG5vbi1ib3VuZGFyeSBkYXRlXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5pc0JvdW5kYXJ5KG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDJUMDI6MDA6MDEgRXVyb3BlL0Ftc3RlcmRhbVwiKSkpLnRvLmVxdWFsKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIGZhbHNlIGZvciBudWxsIGRhdGVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmlzQm91bmRhcnkobnVsbCkpLnRvLmVxdWFsKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcImVxdWFscygpXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiBmYWxzZSBmb3IgcGVyaW9kcyB3aXRoIGRpZmZlcmVudCBzdGFydFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHR2YXIgcSA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMSBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0ZXhwZWN0KHAuZXF1YWxzKHEpKS50by5lcXVhbChmYWxzZSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiBmYWxzZSBmb3IgcGVyaW9kcyB3aXRoIGVxdWFsIHN0YXJ0IGJ1dCBkaWZmZXJlbnQgdGltZSB6b25lIGVmZmVjdFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHR2YXIgcSA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMTowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmVxdWFscyhxKSkudG8uZXF1YWwoZmFsc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIHBlcmlvZHMgd2l0aCBkaWZmZXJlbnQgYW1vdW50XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMiwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5lcXVhbHMocSkpLnRvLmVxdWFsKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIGZhbHNlIGZvciBwZXJpb2RzIHdpdGggZGlmZmVyZW50IHVuaXRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0dmFyIHEgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5NaW51dGUsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0ZXhwZWN0KHAuZXF1YWxzKHEpKS50by5lcXVhbChmYWxzZSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiBmYWxzZSBmb3IgcGVyaW9kcyB3aXRoIGRpZmZlcmVudCBEU1Qgc2V0dGluZyB0aGF0IG1hdHRlcnNcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuZXF1YWxzKHEpKS50by5lcXVhbChmYWxzZSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0cnVlIGZvciBwZXJpb2RzIGRpZmZlcmVudCBEU1Qgc2V0dGluZyB0aGF0IGRvZXMgbm90IG1hdHRlclwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHR2YXIgcSA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAuZXF1YWxzKHEpKS50by5lcXVhbCh0cnVlKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRydWUgZm9yIGlkZW50aWNhbCBwZXJpb2RzXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5lcXVhbHMocSkpLnRvLmVxdWFsKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdHJ1ZSBmb3IgcGVyaW9kcyB3aXRoIGVxdWFsIGJ1dCBub3QgaWRlbnRpY2FsIHN0YXJ0XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEdNVFwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5lcXVhbHMocSkpLnRvLmVxdWFsKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdHJ1ZSBmb3IgcGVyaW9kcyB3aXRoIGRpZmZlcmVudCB1bml0IGFuZCBhbW91bnQgdGhhdCBhZGRzIHVwIHRvIHNhbWVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0dmFyIHEgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCA2MCwgVGltZVVuaXQuTWludXRlLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmVxdWFscyhxKSkudG8uZXF1YWwodHJ1ZSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJpZGVudGljYWwoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIHBlcmlvZHMgd2l0aCBkaWZmZXJlbnQgc3RhcnRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0dmFyIHEgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDEgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmlkZW50aWNhbChxKSkudG8uZXF1YWwoZmFsc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIHBlcmlvZHMgd2l0aCBlcXVhbCBzdGFydCBidXQgZGlmZmVyZW50IHRpbWUgem9uZSBlZmZlY3RcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0dmFyIHEgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDE6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5pZGVudGljYWwocSkpLnRvLmVxdWFsKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIGZhbHNlIGZvciBwZXJpb2RzIHdpdGggZGlmZmVyZW50IGFtb3VudFwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHR2YXIgcSA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDIsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0ZXhwZWN0KHAuaWRlbnRpY2FsKHEpKS50by5lcXVhbChmYWxzZSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiBmYWxzZSBmb3IgcGVyaW9kcyB3aXRoIGRpZmZlcmVudCB1bml0XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuTWludXRlLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmlkZW50aWNhbChxKSkudG8uZXF1YWwoZmFsc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIHBlcmlvZHMgd2l0aCBkaWZmZXJlbnQgRFNUIHNldHRpbmcgdGhhdCBtYXR0ZXJzXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHR2YXIgcSA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBFdXJvcGUvQW1zdGVyZGFtXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckludGVydmFscyk7XHJcblx0XHRcdGV4cGVjdChwLmlkZW50aWNhbChxKSkudG8uZXF1YWwoZmFsc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIHBlcmlvZHMgZGlmZmVyZW50IERTVCBzZXR0aW5nIHRoYXQgZG9lcyBub3QgbWF0dGVyXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJJbnRlcnZhbHMpO1xyXG5cdFx0XHRleHBlY3QocC5pZGVudGljYWwocSkpLnRvLmVxdWFsKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIGZhbHNlIGZvciBwZXJpb2RzIHdpdGggZXF1YWwgYnV0IG5vdCBpZGVudGljYWwgc3RhcnRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgcCA9IG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMCBVVENcIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKTtcclxuXHRcdFx0dmFyIHEgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgR01UXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmlkZW50aWNhbChxKSkudG8uZXF1YWwoZmFsc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gZmFsc2UgZm9yIHBlcmlvZHMgd2l0aCBkaWZmZXJlbnQgdW5pdCBhbmQgYW1vdW50IHRoYXQgYWRkcyB1cCB0byBzYW1lXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgNjAsIFRpbWVVbml0Lk1pbnV0ZSwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5pZGVudGljYWwocSkpLnRvLmVxdWFsKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRydWUgZm9yIGlkZW50aWNhbCBwZXJpb2RzXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgVVRDXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIFVUQ1wiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC5pZGVudGljYWwocSkpLnRvLmVxdWFsKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwidG9TdHJpbmcoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCB3b3JrIHdpdGggbmFpdmUgZGF0ZVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLnRvU3RyaW5nKCkpLnRvLmVxdWFsKFwiMSBob3VyLCBzdGFydGluZyBhdCAyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMFwiKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgd29yayB3aXRoIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0dmFyIHAgPSBuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDAgRXVyb3BlL0Ftc3RlcmRhbVwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpO1xyXG5cdFx0XHRleHBlY3QocC50b1N0cmluZygpKS50by5lcXVhbChcIjEgaG91ciwgc3RhcnRpbmcgYXQgMjAxNC0wMS0wMVQwMDowMDowMC4wMDAgRXVyb3BlL0Ftc3RlcmRhbSwga2VlcGluZyByZWd1bGFyIGxvY2FsIHRpbWVcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHdvcmsgd2l0aCBQZXJpb2REc3QuUmVndWxhckludGVydmFsc1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDEsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAudG9TdHJpbmcoKSkudG8uZXF1YWwoXCIxIGhvdXIsIHN0YXJ0aW5nIGF0IDIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwIEV1cm9wZS9BbXN0ZXJkYW0sIGtlZXBpbmcgcmVndWxhciBpbnRlcnZhbHNcIik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHdvcmsgd2l0aCBtdWx0aXBsZSBob3Vyc1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwIEV1cm9wZS9BbXN0ZXJkYW1cIiksIDIsIFRpbWVVbml0LkhvdXIsIFBlcmlvZERzdC5SZWd1bGFySW50ZXJ2YWxzKTtcclxuXHRcdFx0ZXhwZWN0KHAudG9TdHJpbmcoKSkudG8uZXF1YWwoXCIyIGhvdXJzLCBzdGFydGluZyBhdCAyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMCBFdXJvcGUvQW1zdGVyZGFtLCBrZWVwaW5nIHJlZ3VsYXIgaW50ZXJ2YWxzXCIpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGRlc2NyaWJlKFwidG9Jc29TdHJpbmcoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCB3b3JrXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDBcIiksIDYwLCBUaW1lVW5pdC5NaWxsaXNlY29uZCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC50b0lzb1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwL1AwLjA2MFNcIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwXCIpLCAxLCBUaW1lVW5pdC5TZWNvbmQsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQudG9Jc29TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMC9QMVNcIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwXCIpLCAxLCBUaW1lVW5pdC5NaW51dGUsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQudG9Jc29TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMC9QVDFNXCIpO1xyXG5cdFx0XHRleHBlY3QoKG5ldyBQZXJpb2QobmV3IERhdGVUaW1lKFwiMjAxNC0wMS0wMVQwMDowMDowMFwiKSwgMSwgVGltZVVuaXQuSG91ciwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC50b0lzb1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwL1AxSFwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDBcIiksIDEsIFRpbWVVbml0LkRheSwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC50b0lzb1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwL1AxRFwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDBcIiksIDEsIFRpbWVVbml0LldlZWssIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQudG9Jc29TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMC9QMVdcIik7XHJcblx0XHRcdGV4cGVjdCgobmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwXCIpLCAxLCBUaW1lVW5pdC5Nb250aCwgUGVyaW9kRHN0LlJlZ3VsYXJMb2NhbFRpbWUpKVxyXG5cdFx0XHRcdC50b0lzb1N0cmluZygpKVxyXG5cdFx0XHRcdC50by5lcXVhbChcIjIwMTQtMDEtMDFUMDA6MDA6MDAuMDAwL1AxTVwiKTtcclxuXHRcdFx0ZXhwZWN0KChuZXcgUGVyaW9kKG5ldyBEYXRlVGltZShcIjIwMTQtMDEtMDFUMDA6MDA6MDBcIiksIDEsIFRpbWVVbml0LlllYXIsIFBlcmlvZERzdC5SZWd1bGFyTG9jYWxUaW1lKSlcclxuXHRcdFx0XHQudG9Jc29TdHJpbmcoKSlcclxuXHRcdFx0XHQudG8uZXF1YWwoXCIyMDE0LTAxLTAxVDAwOjAwOjAwLjAwMC9QMVlcIik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJpbnNwZWN0KClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgd29ya1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdGV4cGVjdChwLmluc3BlY3QoKSkudG8uZXF1YWwoXCJbUGVyaW9kOiBcIiArIHAudG9TdHJpbmcoKSArIFwiXVwiKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcImNsb25lKClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgd29ya1wiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRcdHZhciBwID0gbmV3IFBlcmlvZChuZXcgRGF0ZVRpbWUoXCIyMDE0LTAxLTAxVDAwOjAwOjAwXCIpLCAxLCBUaW1lVW5pdC5Ib3VyLCBQZXJpb2REc3QuUmVndWxhckxvY2FsVGltZSk7XHJcblx0XHRcdHZhciBxID0gcC5jbG9uZSgpO1xyXG5cdFx0XHRleHBlY3QocCkubm90LnRvLmVxdWFsKHEpO1xyXG5cdFx0XHRleHBlY3QocC5pZGVudGljYWwocSkpLnRvLmVxdWFsKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG59KTtcclxuLy8gdG9kbyB0ZXN0IERTVCB6b25lIHdoZXJlIERTVCBzYXZlIGlzIG5vdCBhIHdob2xlIGhvdXIgKDIwIG9yIDQwIG1pbnV0ZXMpXHJcbi8vIHRvZG8gdGVzdCB6b25lIHdpdGggdHdvIERTVHNcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9