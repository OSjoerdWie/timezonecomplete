/**
 * Copyright(c) 2014 Spirit IT BV
 *
 * String utility functions
 */
/// <reference path="../typings/lib.d.ts"/>
"use strict";
var assert = require("assert");
/**
 * Pad a string by adding characters to the beginning.
 * @param s	the string to pad
 * @param width	the desired minimum string width
 * @param char	the single character to pad with
 * @return	the padded string
 */
function padLeft(s, width, char) {
    assert(width > 0, "expect width > 0");
    assert(char.length === 1, "expect single character in char");
    var padding = "";
    for (var i = 0; i < (width - s.length); i++) {
        padding += char;
    }
    return padding + s;
}
exports.padLeft = padLeft;
/**
 * Pad a string by adding characters to the end.
 * @param s	the string to pad
 * @param width	the desired minimum string width
 * @param char	the single character to pad with
 * @return	the padded string
 */
function padRight(s, width, char) {
    assert(width > 0, "expect width > 0");
    assert(char.length === 1, "expect single character in char");
    var padding = "";
    for (var i = 0; i < (width - s.length); i++) {
        padding += char;
    }
    return s + padding;
}
exports.padRight = padRight;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zdHJpbmdzLnRzIl0sIm5hbWVzIjpbInBhZExlZnQiLCJwYWRSaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILDJDQUEyQztBQUUzQyxZQUFZLENBQUM7QUFFYixJQUFPLE1BQU0sV0FBVyxRQUFRLENBQUMsQ0FBQztBQUVsQzs7Ozs7O0dBTUc7QUFDSCxpQkFBd0IsQ0FBUyxFQUFFLEtBQWEsRUFBRSxJQUFZO0lBQzdEQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO0lBQ3RDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxFQUFFQSxpQ0FBaUNBLENBQUNBLENBQUNBO0lBQzdEQSxJQUFJQSxPQUFPQSxHQUFXQSxFQUFFQSxDQUFDQTtJQUN6QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7UUFDN0NBLE9BQU9BLElBQUlBLElBQUlBLENBQUNBO0lBQ2pCQSxDQUFDQTtJQUNEQSxNQUFNQSxDQUFDQSxPQUFPQSxHQUFHQSxDQUFDQSxDQUFDQTtBQUNwQkEsQ0FBQ0E7QUFSZSxlQUFPLFVBUXRCLENBQUE7QUFFRDs7Ozs7O0dBTUc7QUFDSCxrQkFBeUIsQ0FBUyxFQUFFLEtBQWEsRUFBRSxJQUFZO0lBQzlEQyxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO0lBQ3RDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxFQUFFQSxpQ0FBaUNBLENBQUNBLENBQUNBO0lBQzdEQSxJQUFJQSxPQUFPQSxHQUFXQSxFQUFFQSxDQUFDQTtJQUN6QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7UUFDN0NBLE9BQU9BLElBQUlBLElBQUlBLENBQUNBO0lBQ2pCQSxDQUFDQTtJQUNEQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQTtBQUNwQkEsQ0FBQ0E7QUFSZSxnQkFBUSxXQVF2QixDQUFBIiwiZmlsZSI6ImxpYi9zdHJpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSAyMDE0IFNwaXJpdCBJVCBCVlxyXG4gKlxyXG4gKiBTdHJpbmcgdXRpbGl0eSBmdW5jdGlvbnNcclxuICovXHJcblxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9saWIuZC50c1wiLz5cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XHJcblxyXG4vKipcclxuICogUGFkIGEgc3RyaW5nIGJ5IGFkZGluZyBjaGFyYWN0ZXJzIHRvIHRoZSBiZWdpbm5pbmcuXHJcbiAqIEBwYXJhbSBzXHR0aGUgc3RyaW5nIHRvIHBhZFxyXG4gKiBAcGFyYW0gd2lkdGhcdHRoZSBkZXNpcmVkIG1pbmltdW0gc3RyaW5nIHdpZHRoXHJcbiAqIEBwYXJhbSBjaGFyXHR0aGUgc2luZ2xlIGNoYXJhY3RlciB0byBwYWQgd2l0aFxyXG4gKiBAcmV0dXJuXHR0aGUgcGFkZGVkIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhZExlZnQoczogc3RyaW5nLCB3aWR0aDogbnVtYmVyLCBjaGFyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdGFzc2VydCh3aWR0aCA+IDAsIFwiZXhwZWN0IHdpZHRoID4gMFwiKTtcclxuXHRhc3NlcnQoY2hhci5sZW5ndGggPT09IDEsIFwiZXhwZWN0IHNpbmdsZSBjaGFyYWN0ZXIgaW4gY2hhclwiKTtcclxuXHR2YXIgcGFkZGluZzogc3RyaW5nID0gXCJcIjtcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8ICh3aWR0aCAtIHMubGVuZ3RoKTsgaSsrKSB7XHJcblx0XHRwYWRkaW5nICs9IGNoYXI7XHJcblx0fVxyXG5cdHJldHVybiBwYWRkaW5nICsgcztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhZCBhIHN0cmluZyBieSBhZGRpbmcgY2hhcmFjdGVycyB0byB0aGUgZW5kLlxyXG4gKiBAcGFyYW0gc1x0dGhlIHN0cmluZyB0byBwYWRcclxuICogQHBhcmFtIHdpZHRoXHR0aGUgZGVzaXJlZCBtaW5pbXVtIHN0cmluZyB3aWR0aFxyXG4gKiBAcGFyYW0gY2hhclx0dGhlIHNpbmdsZSBjaGFyYWN0ZXIgdG8gcGFkIHdpdGhcclxuICogQHJldHVyblx0dGhlIHBhZGRlZCBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWRSaWdodChzOiBzdHJpbmcsIHdpZHRoOiBudW1iZXIsIGNoYXI6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0YXNzZXJ0KHdpZHRoID4gMCwgXCJleHBlY3Qgd2lkdGggPiAwXCIpO1xyXG5cdGFzc2VydChjaGFyLmxlbmd0aCA9PT0gMSwgXCJleHBlY3Qgc2luZ2xlIGNoYXJhY3RlciBpbiBjaGFyXCIpO1xyXG5cdHZhciBwYWRkaW5nOiBzdHJpbmcgPSBcIlwiO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgKHdpZHRoIC0gcy5sZW5ndGgpOyBpKyspIHtcclxuXHRcdHBhZGRpbmcgKz0gY2hhcjtcclxuXHR9XHJcblx0cmV0dXJuIHMgKyBwYWRkaW5nO1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=