/// <reference path="../typings/test.d.ts" />
var sourcemapsupport = require("source-map-support");
// Enable source-map support for backtraces. Causes TS files & linenumbers to show up in them.
sourcemapsupport.install({ handleUncaughtExceptions: false });
var assert = require("assert");
var chai = require("chai");
var expect = chai.expect;
var globals = require("../lib/globals");
var datetimeFuncs = require("../lib/index");
var DateTime = datetimeFuncs.DateTime;
var Duration = datetimeFuncs.Duration;
describe("globals", function () {
    describe("min()", function () {
        it("should return the minimum of two Durations", function () {
            expect(globals.min(Duration.seconds(3), Duration.seconds(4)).seconds()).to.equal(3);
        });
        it("should return the minimum of two DateTimes", function () {
            expect(globals.min(new DateTime(1), new DateTime(2)).unixUtcMillis()).to.equal(1);
        });
        it("should throw on null input", function () {
            assert.throws(function () {
                globals.min(null, Duration.seconds(2));
            });
            assert.throws(function () {
                globals.min(Duration.seconds(2), null);
            });
        });
    });
    describe("max()", function () {
        it("should return the maximum of two Durations", function () {
            expect(globals.max(Duration.seconds(3), Duration.seconds(4)).seconds()).to.equal(4);
        });
        it("should return the maximum of two DateTimes", function () {
            expect(globals.max(new DateTime(1), new DateTime(2)).unixUtcMillis()).to.equal(2);
        });
        it("should throw on null input", function () {
            assert.throws(function () {
                globals.max(null, Duration.seconds(2));
            });
            assert.throws(function () {
                globals.max(Duration.seconds(2), null);
            });
        });
    });
    describe("abs()", function () {
        it("should return the same value for a positive duration", function () {
            expect(globals.abs(Duration.milliseconds(2)).milliseconds()).to.equal(2);
        });
        it("should return the same value for a zero duration", function () {
            expect(globals.abs(Duration.milliseconds(0)).milliseconds()).to.equal(0);
        });
        it("should return the inverted value for a negative duration", function () {
            expect(globals.abs(Duration.milliseconds(-2)).milliseconds()).to.equal(2);
        });
        it("should return a clone", function () {
            var d = Duration.milliseconds(2);
            expect(globals.abs(d)).not.to.equal(d);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3Rlc3QtZ2xvYmFscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3Rlc3QuZC50c1wiIC8+XHJcblxyXG5pbXBvcnQgc291cmNlbWFwc3VwcG9ydCA9IHJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIik7XHJcbi8vIEVuYWJsZSBzb3VyY2UtbWFwIHN1cHBvcnQgZm9yIGJhY2t0cmFjZXMuIENhdXNlcyBUUyBmaWxlcyAmIGxpbmVudW1iZXJzIHRvIHNob3cgdXAgaW4gdGhlbS5cclxuc291cmNlbWFwc3VwcG9ydC5pbnN0YWxsKHsgaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zOiBmYWxzZSB9KTtcclxuXHJcbmltcG9ydCBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xyXG5pbXBvcnQgY2hhaSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xyXG5pbXBvcnQgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XHJcblxyXG5pbXBvcnQgZ2xvYmFscyA9IHJlcXVpcmUoXCIuLi9saWIvZ2xvYmFsc1wiKTtcclxuXHJcbmltcG9ydCBkYXRldGltZUZ1bmNzID0gcmVxdWlyZShcIi4uL2xpYi9pbmRleFwiKTtcclxuaW1wb3J0IERhdGVUaW1lID0gZGF0ZXRpbWVGdW5jcy5EYXRlVGltZTtcclxuaW1wb3J0IER1cmF0aW9uID0gZGF0ZXRpbWVGdW5jcy5EdXJhdGlvbjtcclxuXHJcbmRlc2NyaWJlKFwiZ2xvYmFsc1wiLCAoKTogdm9pZCA9PiB7XHJcblxyXG5cdGRlc2NyaWJlKFwibWluKClcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRoZSBtaW5pbXVtIG9mIHR3byBEdXJhdGlvbnNcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5taW4oRHVyYXRpb24uc2Vjb25kcygzKSwgRHVyYXRpb24uc2Vjb25kcyg0KSkuc2Vjb25kcygpKS50by5lcXVhbCgzKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIHRoZSBtaW5pbXVtIG9mIHR3byBEYXRlVGltZXNcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5taW4obmV3IERhdGVUaW1lKDEpLCBuZXcgRGF0ZVRpbWUoMikpLnVuaXhVdGNNaWxsaXMoKSkudG8uZXF1YWwoMSk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHRocm93IG9uIG51bGwgaW5wdXRcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRhc3NlcnQudGhyb3dzKCgpOiB2b2lkID0+IHtcclxuXHRcdFx0XHRnbG9iYWxzLm1pbihudWxsLCBEdXJhdGlvbi5zZWNvbmRzKDIpKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGFzc2VydC50aHJvd3MoKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRcdGdsb2JhbHMubWluKER1cmF0aW9uLnNlY29uZHMoMiksIG51bGwpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcIm1heCgpXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0aGUgbWF4aW11bSBvZiB0d28gRHVyYXRpb25zXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KGdsb2JhbHMubWF4KER1cmF0aW9uLnNlY29uZHMoMyksIER1cmF0aW9uLnNlY29uZHMoNCkpLnNlY29uZHMoKSkudG8uZXF1YWwoNCk7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0aGUgbWF4aW11bSBvZiB0d28gRGF0ZVRpbWVzXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KGdsb2JhbHMubWF4KG5ldyBEYXRlVGltZSgxKSwgbmV3IERhdGVUaW1lKDIpKS51bml4VXRjTWlsbGlzKCkpLnRvLmVxdWFsKDIpO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCB0aHJvdyBvbiBudWxsIGlucHV0XCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0YXNzZXJ0LnRocm93cygoKTogdm9pZCA9PiB7XHJcblx0XHRcdFx0Z2xvYmFscy5tYXgobnVsbCwgRHVyYXRpb24uc2Vjb25kcygyKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRhc3NlcnQudGhyb3dzKCgpOiB2b2lkID0+IHtcclxuXHRcdFx0XHRnbG9iYWxzLm1heChEdXJhdGlvbi5zZWNvbmRzKDIpLCBudWxsKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJhYnMoKVwiLCAoKTogdm9pZCA9PiB7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdGhlIHNhbWUgdmFsdWUgZm9yIGEgcG9zaXRpdmUgZHVyYXRpb25cIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRleHBlY3QoZ2xvYmFscy5hYnMoRHVyYXRpb24ubWlsbGlzZWNvbmRzKDIpKS5taWxsaXNlY29uZHMoKSkudG8uZXF1YWwoMik7XHJcblx0XHR9KTtcclxuXHRcdGl0KFwic2hvdWxkIHJldHVybiB0aGUgc2FtZSB2YWx1ZSBmb3IgYSB6ZXJvIGR1cmF0aW9uXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KGdsb2JhbHMuYWJzKER1cmF0aW9uLm1pbGxpc2Vjb25kcygwKSkubWlsbGlzZWNvbmRzKCkpLnRvLmVxdWFsKDApO1xyXG5cdFx0fSk7XHJcblx0XHRpdChcInNob3VsZCByZXR1cm4gdGhlIGludmVydGVkIHZhbHVlIGZvciBhIG5lZ2F0aXZlIGR1cmF0aW9uXCIsICgpOiB2b2lkID0+IHtcclxuXHRcdFx0ZXhwZWN0KGdsb2JhbHMuYWJzKER1cmF0aW9uLm1pbGxpc2Vjb25kcygtMikpLm1pbGxpc2Vjb25kcygpKS50by5lcXVhbCgyKTtcclxuXHRcdH0pO1xyXG5cdFx0aXQoXCJzaG91bGQgcmV0dXJuIGEgY2xvbmVcIiwgKCk6IHZvaWQgPT4ge1xyXG5cdFx0XHR2YXIgZDogRHVyYXRpb24gPSBEdXJhdGlvbi5taWxsaXNlY29uZHMoMik7XHJcblx0XHRcdGV4cGVjdChnbG9iYWxzLmFicyhkKSkubm90LnRvLmVxdWFsKGQpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
