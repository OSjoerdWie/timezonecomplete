/**
 * Copyright(c) 2014 Spirit IT BV
 *
 * Global functions depending on DateTime/Duration etc
 */
/// <reference path="../typings/lib.d.ts"/>
"use strict";
var assert = require("assert");
var datetime = require("./datetime");
var DateTime = datetime.DateTime;
var duration = require("./duration");
var Duration = duration.Duration;
/**
 * Returns the minimum of two DateTimes or Durations
 */
function min(d1, d2) {
    assert(d1, "first argument is null");
    assert(d2, "first argument is null");
    /* istanbul ignore next */
    assert((d1 instanceof DateTime && d2 instanceof DateTime) || (d1 instanceof Duration && d2 instanceof Duration), "Either two datetimes or two durations expected");
    return d1.min(d2);
}
exports.min = min;
/**
 * Returns the maximum of two DateTimes or Durations
 */
function max(d1, d2) {
    assert(d1, "first argument is null");
    assert(d2, "first argument is null");
    /* istanbul ignore next */
    assert((d1 instanceof DateTime && d2 instanceof DateTime) || (d1 instanceof Duration && d2 instanceof Duration), "Either two datetimes or two durations expected");
    return d1.max(d2);
}
exports.max = max;
/**
 * Returns the absolute value of a Duration
 */
function abs(d) {
    assert(d, "first argument is null");
    assert(d instanceof Duration, "first argument is not a Duration");
    return d.abs();
}
exports.abs = abs;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9nbG9iYWxzLnRzIl0sIm5hbWVzIjpbIm1pbiIsIm1heCIsImFicyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILDJDQUEyQztBQUUzQyxZQUFZLENBQUM7QUFFYixJQUFPLE1BQU0sV0FBVyxRQUFRLENBQUMsQ0FBQztBQUVsQyxJQUFPLFFBQVEsV0FBVyxZQUFZLENBQUMsQ0FBQztBQUN4QyxJQUFPLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO0FBRXBDLElBQU8sUUFBUSxXQUFXLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLElBQU8sUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFXcEM7O0dBRUc7QUFDSCxhQUFvQixFQUFPLEVBQUUsRUFBTztJQUNuQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsRUFBRUEsd0JBQXdCQSxDQUFDQSxDQUFDQTtJQUNyQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsRUFBRUEsd0JBQXdCQSxDQUFDQSxDQUFDQTtJQUNyQ0EsMEJBQTBCQTtJQUMxQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsWUFBWUEsUUFBUUEsSUFBSUEsRUFBRUEsWUFBWUEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsWUFBWUEsUUFBUUEsSUFBSUEsRUFBRUEsWUFBWUEsUUFBUUEsQ0FBQ0EsRUFDOUdBLGdEQUFnREEsQ0FBQ0EsQ0FBQ0E7SUFDbkRBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO0FBQ25CQSxDQUFDQTtBQVBlLFdBQUcsTUFPbEIsQ0FBQTtBQVVEOztHQUVHO0FBQ0gsYUFBb0IsRUFBTyxFQUFFLEVBQU87SUFDbkNDLE1BQU1BLENBQUNBLEVBQUVBLEVBQUVBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLE1BQU1BLENBQUNBLEVBQUVBLEVBQUVBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLDBCQUEwQkE7SUFDMUJBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLFlBQVlBLFFBQVFBLElBQUlBLEVBQUVBLFlBQVlBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLFlBQVlBLFFBQVFBLElBQUlBLEVBQUVBLFlBQVlBLFFBQVFBLENBQUNBLEVBQzlHQSxnREFBZ0RBLENBQUNBLENBQUNBO0lBQ25EQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtBQUNuQkEsQ0FBQ0E7QUFQZSxXQUFHLE1BT2xCLENBQUE7QUFFRDs7R0FFRztBQUNILGFBQW9CLENBQVc7SUFDOUJDLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7SUFDcENBLE1BQU1BLENBQUNBLENBQUNBLFlBQVlBLFFBQVFBLEVBQUVBLGtDQUFrQ0EsQ0FBQ0EsQ0FBQ0E7SUFDbEVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO0FBQ2hCQSxDQUFDQTtBQUplLFdBQUcsTUFJbEIsQ0FBQSIsImZpbGUiOiJsaWIvZ2xvYmFscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBTcGlyaXQgSVQgQlZcclxuICpcclxuICogR2xvYmFsIGZ1bmN0aW9ucyBkZXBlbmRpbmcgb24gRGF0ZVRpbWUvRHVyYXRpb24gZXRjXHJcbiAqL1xyXG5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvbGliLmQudHNcIi8+XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xyXG5cclxuaW1wb3J0IGRhdGV0aW1lID0gcmVxdWlyZShcIi4vZGF0ZXRpbWVcIik7XHJcbmltcG9ydCBEYXRlVGltZSA9IGRhdGV0aW1lLkRhdGVUaW1lO1xyXG5cclxuaW1wb3J0IGR1cmF0aW9uID0gcmVxdWlyZShcIi4vZHVyYXRpb25cIik7XHJcbmltcG9ydCBEdXJhdGlvbiA9IGR1cmF0aW9uLkR1cmF0aW9uO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byBEYXRlVGltZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtaW4oZDE6IERhdGVUaW1lLCBkMjogRGF0ZVRpbWUpOiBEYXRlVGltZTtcclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIER1cmF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbihkMTogRHVyYXRpb24sIGQyOiBEdXJhdGlvbik6IER1cmF0aW9uO1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gRGF0ZVRpbWVzIG9yIER1cmF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbihkMTogYW55LCBkMjogYW55KTogYW55IHtcclxuXHRhc3NlcnQoZDEsIFwiZmlyc3QgYXJndW1lbnQgaXMgbnVsbFwiKTtcclxuXHRhc3NlcnQoZDIsIFwiZmlyc3QgYXJndW1lbnQgaXMgbnVsbFwiKTtcclxuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdGFzc2VydCgoZDEgaW5zdGFuY2VvZiBEYXRlVGltZSAmJiBkMiBpbnN0YW5jZW9mIERhdGVUaW1lKSB8fCAoZDEgaW5zdGFuY2VvZiBEdXJhdGlvbiAmJiBkMiBpbnN0YW5jZW9mIER1cmF0aW9uKSxcclxuXHRcdFwiRWl0aGVyIHR3byBkYXRldGltZXMgb3IgdHdvIGR1cmF0aW9ucyBleHBlY3RlZFwiKTtcclxuXHRyZXR1cm4gZDEubWluKGQyKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIERhdGVUaW1lc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1heChkMTogRGF0ZVRpbWUsIGQyOiBEYXRlVGltZSk6IERhdGVUaW1lO1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gRHVyYXRpb25zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWF4KGQxOiBEdXJhdGlvbiwgZDI6IER1cmF0aW9uKTogRHVyYXRpb247XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byBEYXRlVGltZXMgb3IgRHVyYXRpb25zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWF4KGQxOiBhbnksIGQyOiBhbnkpOiBhbnkge1xyXG5cdGFzc2VydChkMSwgXCJmaXJzdCBhcmd1bWVudCBpcyBudWxsXCIpO1xyXG5cdGFzc2VydChkMiwgXCJmaXJzdCBhcmd1bWVudCBpcyBudWxsXCIpO1xyXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcblx0YXNzZXJ0KChkMSBpbnN0YW5jZW9mIERhdGVUaW1lICYmIGQyIGluc3RhbmNlb2YgRGF0ZVRpbWUpIHx8IChkMSBpbnN0YW5jZW9mIER1cmF0aW9uICYmIGQyIGluc3RhbmNlb2YgRHVyYXRpb24pLFxyXG5cdFx0XCJFaXRoZXIgdHdvIGRhdGV0aW1lcyBvciB0d28gZHVyYXRpb25zIGV4cGVjdGVkXCIpO1xyXG5cdHJldHVybiBkMS5tYXgoZDIpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgYSBEdXJhdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFicyhkOiBEdXJhdGlvbik6IER1cmF0aW9uIHtcclxuXHRhc3NlcnQoZCwgXCJmaXJzdCBhcmd1bWVudCBpcyBudWxsXCIpO1xyXG5cdGFzc2VydChkIGluc3RhbmNlb2YgRHVyYXRpb24sIFwiZmlyc3QgYXJndW1lbnQgaXMgbm90IGEgRHVyYXRpb25cIik7XHJcblx0cmV0dXJuIGQuYWJzKCk7XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
